lizard$Family
lizard$Genus
sort(unique(lizard$Family))
families <- sort(unique(lizard$Family))
familes <- families[which(nchar(families)>1)]
families <- sort(unique(lizard$Family))
families <- families[which(nchar(families)>1)]
families
genera <- sort(unique(lizard$Genus))
genera <- genera[which(nchar(genera)>1)]
genera
#lookup#
famgen <- aggregate(Genus~Family,#
          data = lizard, #
          FUN = unique)
famgen
str(famgen)
famgen <- famgen[-1,]
plotchoices <- c('slope','smallest.clutch','largest.clutch','minimum.mean.Tb','maximum.mean.Tb')
ii <- c(1:2)
families <- sort(unique(lizard$Family))#
families <- families[which(nchar(families)>1)]#
#
genera <- sort(unique(lizard$Genus))#
genera <- genera[which(nchar(genera)>1)]#
#
#lookup#
famgen <- aggregate(Genus~Family,#
          data = lizard, #
          FUN = unique)#
famgen <- famgen[-1,]#
#
plotchoices <- c('slope','smallest.clutch','largest.clutch','minimum.mean.Tb','maximum.mean.Tb')
famgen[,1]
ii
famgen[ii,2]
famgen[ii,1]
newgenera <- famgen[ii,2]
names(newgenera) <- famgen[ii,1]
str(newgenera)
library(shiny)#
library(bslib)#
#
url <- url("https://github.com/zsiders/BuildingRShinyCourse/raw/refs/heads/main/Day%201%20-%20Introduction/First%20Example/Meiri_Lizard_traits.csv")#
lizard <- read.csv(url)#
#
families <- sort(unique(lizard$Family))#
families <- families[which(nchar(families)>1)]#
#
genera <- sort(unique(lizard$Genus))#
genera <- genera[which(nchar(genera)>1)]#
#
#lookup#
famgen <- aggregate(Genus~Family,#
          data = lizard, #
          FUN = unique)#
famgen <- famgen[-1,]#
#
plotchoices <- c('slope','smallest.clutch','largest.clutch','minimum.mean.Tb','maximum.mean.Tb')#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
ui <- page_sidebar(#
   title = "Example App",#
   sidebar = sidebar(#
     selectizeInput(inputId = 'family',#
                 label = "Choose an Family",#
                 choices = families,#
                 multiple = TRUE,#
                 options = list(maxItems = 3,#
                                placeholder = 'Choose')),#
     selectizeInput(inputId = 'genus',#
                 label = "Choose an Genus",#
                 choices = genera,#
                 options = list(placeholder = 'Choose')),#
     selectizeInput(inputId = 'plotchoice',#
                 label = "Choose what to plot",#
                 choices = plotchoices)#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
#
  observeEvent(input$family,{#
    ii <- which(famgen[,1] %in% input$family)#
    newgenera <- famgen[ii,2]#
    names(newgenera) <- famgen[ii,1]#
    updateSelectizeInput(session = session,#
                         inputId = 'genus',#
                         label = 'Choose a Genus',#
                         choices = newgenera,#
                         options = list(placeholder = "Choose"))#
  })#
}#
#
shinyApp(ui = ui, server = server)
?page_sidebar
library(shiny)#
library(bslib)#
#
ui <- page_fillable(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1'#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(2,8)#
))#
#
server <- function(input,output){#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fillable(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(2,8)#
))#
#
server <- function(input,output){#
#
}#
#
shinyApp(ui = ui, server = server)
?layout_sidebar
?layout_column_wrap
library(shiny)#
library(bslib)#
#
ui <- page_fillable(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(2,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fillable(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
#
}#
#
shinyApp(ui = ui, server = server)
head(iris)
str(iris)
library(shiny)#
library(bslib)#
#
ui <- page_fillable(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot1')),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fillable(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot1')),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
        # palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
?palette
palette.colors(n = NULL, palette = "Okabe-Ito", alpha, recycle = FALSE,#
               names = FALSE)
palette.colors(n = 5, palette = "Okabe-Ito", 1, recycle = FALSE,#
               names = FALSE)
?page_fixed
library(shiny)#
library(bslib)#
#
ui <- page_fixed(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot1')),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot1')),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(rintrojs)#
library(shiny)#
#
# Define UI for application that draws a histogram#
ui <- shinyUI(fluidPage(#
  introjsUI(),#
  # Application title#
  introBox(#
    titlePanel("Old Faithful Geyser Data"),#
    data.step = 1,#
    data.intro = "This is the title panel"#
  ),#
  # Sidebar with a slider input for number of bins#
  sidebarLayout(sidebarPanel(#
    introBox(#
      introBox(#
        sliderInput(#
          "bins",#
          "Number of bins:",#
          min = 1,#
          max = 50,#
          value = 30#
        ),#
        data.step = 3,#
        data.intro = "This is a slider",#
        data.hint = "You can slide me"#
      ),#
      introBox(#
        actionButton("help", "Press for instructions"),#
        data.step = 4,#
        data.intro = "This is a button",#
        data.hint = "You can press me"#
      ),#
      data.step = 2,#
      data.intro = "This is the sidebar. Look how intro elements can nest"#
    )#
  ),#
  # Show a plot of the generated distribution#
  mainPanel(#
    introBox(#
      plotOutput("distPlot"),#
      data.step = 5,#
      data.intro = "This is the main plot"#
    )#
  ))#
))#
#
# Define server logic required to draw a histogram#
server <- shinyServer(function(input, output, session) {#
  # initiate hints on startup with custom button and event#
  hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),#
         events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))#
  output$distPlot <- renderPlot({#
    # generate bins based on input$bins from ui.R#
    x    <- faithful[, 2]#
    bins <- seq(min(x), max(x), length.out = input$bins + 1)#
    # draw the histogram with the specified number of bins#
    hist(x,#
         breaks = bins,#
         col = 'darkgray',#
         border = 'white')#
  })#
  # start introjs when button is pressed with custom options and events#
  observeEvent(input$help,#
               introjs(session, options = list("nextLabel"="Onwards and Upwards",#
                                               "prevLabel"="Did you forget something?",#
                                               "skipLabel"="Don't be a quitter"),#
                                events = list("oncomplete"=I('alert("Glad that is over")')))#
  )#
})#
#
# Run the application#
shinyApp(ui = ui, server = server)
install.packages('rintrojs')
library(rintrojs)#
library(shiny)#
#
# Define UI for application that draws a histogram#
ui <- shinyUI(fluidPage(#
  introjsUI(),#
  # Application title#
  introBox(#
    titlePanel("Old Faithful Geyser Data"),#
    data.step = 1,#
    data.intro = "This is the title panel"#
  ),#
  # Sidebar with a slider input for number of bins#
  sidebarLayout(sidebarPanel(#
    introBox(#
      introBox(#
        sliderInput(#
          "bins",#
          "Number of bins:",#
          min = 1,#
          max = 50,#
          value = 30#
        ),#
        data.step = 3,#
        data.intro = "This is a slider",#
        data.hint = "You can slide me"#
      ),#
      introBox(#
        actionButton("help", "Press for instructions"),#
        data.step = 4,#
        data.intro = "This is a button",#
        data.hint = "You can press me"#
      ),#
      data.step = 2,#
      data.intro = "This is the sidebar. Look how intro elements can nest"#
    )#
  ),#
  # Show a plot of the generated distribution#
  mainPanel(#
    introBox(#
      plotOutput("distPlot"),#
      data.step = 5,#
      data.intro = "This is the main plot"#
    )#
  ))#
))#
#
# Define server logic required to draw a histogram#
server <- shinyServer(function(input, output, session) {#
  # initiate hints on startup with custom button and event#
  hintjs(session, options = list("hintButtonLabel"="Hope this hint was helpful"),#
         events = list("onhintclose"=I('alert("Wasn\'t that hint helpful")')))#
  output$distPlot <- renderPlot({#
    # generate bins based on input$bins from ui.R#
    x    <- faithful[, 2]#
    bins <- seq(min(x), max(x), length.out = input$bins + 1)#
    # draw the histogram with the specified number of bins#
    hist(x,#
         breaks = bins,#
         col = 'darkgray',#
         border = 'white')#
  })#
  # start introjs when button is pressed with custom options and events#
  observeEvent(input$help,#
               introjs(session, options = list("nextLabel"="Onwards and Upwards",#
                                               "prevLabel"="Did you forget something?",#
                                               "skipLabel"="Don't be a quitter"),#
                                events = list("oncomplete"=I('alert("Glad that is over")')))#
  )#
})#
#
# Run the application#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot1'),#
          tooltip('This is the Iris Dataset')),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
?card
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot1'),#
          card_header(#
            tooltip('This is the Iris Dataset')#
            )#
          ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
?card
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(card_header(#
            tooltip('This is the Iris Dataset')#
            ),#
          plotOutput('plot1'),#
          ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(card_header(#
            'Card 3',#
            tooltip('This is the Iris Dataset')#
            ),#
          plotOutput('plot1'),#
          ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(card_header(#
            span('Card 3'),#
            tooltip('This is the Iris Dataset')#
            ),#
          plotOutput('plot1'),#
          ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(card_header(#
            span('Card 3',bsicons::bs_icon("question-circle-fill")),#
            'Additional Info',#
            tooltip('This is the Iris Dataset')#
            ),#
          plotOutput('plot1'),#
          ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(card_header(#
            span('Card 3'),#
            'Additional Info',#
            tooltip('This is the Iris Dataset')#
            ),#
          plotOutput('plot1'),#
          ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
install.packages('bsicons')
library(shiny)#
library(bslib)#
layout(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(card_header(#
            span('Card 3',,bsicons::bs_icon("question-circle-fill")),#
            'Additional Info',#
            tooltip('This is the Iris Dataset')#
            ),#
          plotOutput('plot1'),#
          ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
?tooltip
library(shiny)#
library(bslib)#
layout(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(card_header(#
            tooltip(span('Card 3',,bsicons::bs_icon("question-circle-fill")),#
            'This is the Iris Dataset')#
            ),#
          plotOutput('plot1'),#
          ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
layout(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(card_header(#
            tooltip(span('Card 3',,bsicons::bs_icon("question-circle-fill")),#
            'This is the Iris Dataset',#
            placement = 'right')#
            ),#
          plotOutput('plot1'),#
          ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
layout(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(#
        card_header(#
        tooltip(#
          span("Card title ", bsicons::bs_icon("question-circle-fill")),#
          "Additional info",#
          placement = "right"#
        )#
        ),#
        "Card body content..."#
    ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
layout(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(#
        card_header(#
        tooltip(#
          span("Card 3 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOuput('plot1')#
    ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
layout(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card('Card 1'),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card(#
        card_header(#
        tooltip(#
          span("Card 3 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1')#
    ),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
?layout_columns
?fixedRow
library(shiny)#
library(bslib)#
layout(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1',#
                   hover = hoverOpts(id ="plot_hover")#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$hover_info <- renderPrint({#
        if(!is.null(input$plot_hover)){#
            hover=input$plot_hover#
            dist=sqrt((hover$x-mtcars$mpg)^2+(hover$y-mtcars$disp)^2)#
            cat("Sepal Length\n")#
            if(min(dist) < 3){#
                iris$Sepal.Length[which.min(dist)]#
            }#
        }#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
layout(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1',#
                   hover = hoverOpts(id ="plot_hover"))#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$hover_info <- renderPrint({#
        if(!is.null(input$plot_hover)){#
            hover=input$plot_hover#
            dist=sqrt((hover$x-mtcars$mpg)^2+(hover$y-mtcars$disp)^2)#
            cat("Sepal Length\n")#
            if(min(dist) < 3){#
                iris$Sepal.Length[which.min(dist)]#
            }#
        }#
    })#
}#
#
shinyApp(ui = ui, server = server)
head(iris)
library(shiny)#
library(bslib)#
layout(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1',#
                   hover = hoverOpts(id ="plot_hover"))#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$hover_info <- renderPrint({#
        if(!is.null(input$plot_hover)){#
            hover=input$plot_hover#
            dist=sqrt((hover$x-iris$Sepal.Length)^2+(hover$y-iris$Sepal.Width)^2)#
            cat("Sepal Length\n")#
            if(min(dist) < 3){#
                iris$Sepal.Length[which.min(dist)]#
            }#
        }#
    })#
}#
#
shinyApp(ui = ui, server = server)
?plotOutput
?nearPoints
library(shiny)#
library(bslib)#
library(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1',#
                   hover = hoverOpts(id ="plot_hover"))#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$hover_info <- renderPrint({#
        res <- nearPoints(iris, input$plot_hover,#
                          'Sepal.Length','Sepal.Width')#
        if(nrow(res)==0){#
            return()#
        }else{#
            paste0('Sepal Length = ', res[1,1])#
        }#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(bsicons)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1',#
                   hover = hoverOpts(id ="hover_info"))#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$hover_info <- renderPrint({#
        res <- nearPoints(iris, input$plot_hover,#
                          'Sepal.Length','Sepal.Width')#
        if(nrow(res)==0){#
            return()#
        }else{#
            paste0('Sepal Length = ', res[1,1])#
        }#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shinyBS)
install.packages('shinyBS')
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1'),#
        bsTooltip("plot1", "This is a plot of Sepal Length and Sepal Width from the iris dataset","right", options = list(container = "body"))#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    addTooltip(session,"plot1", "This is a plot of Sepal Length and Sepal Width from the iris dataset","right", options = list(container = "body"), trigger = 'hover')#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    ),#
  layout_column_wrap(#
     card('Card 3'),#
     card('Card 4'),#
     card('Card 5'),#
     card('Card 6')#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    addTooltip(session,#
               id = "plot1", #
               title="This is a plot of Sepal Length and Sepal Width from the iris dataset", #
               placement = 'right',#
               trigger = 'hover')#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    addTooltip(session,#
               id = "plot1", #
               title="This is a plot of Sepal Length and Sepal Width from the iris dataset", #
               placement = 'right',#
               trigger = 'hover')#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    addTooltip(session,#
               id = "plot1", #
               title="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
               placement = 'right',#
               trigger = 'hover')#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    addTooltip(session,#
               id = "plot1", #
               title="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
               placement = 'bottom',#
               trigger = 'hover')#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    addTooltip(session,#
               id = "plot1", #
               title="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
               placement = 'bottom',#
               trigger = 'click')#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    addTooltip(session,#
               id = "plot1", #
               title="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
               placement = 'bottom',#
               trigger = 'click')#
}#
#
app <- shinyApp(ui = ui, server = server)#
#
runApp(app)
?addPopover
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    addPopover(session,#
               id = "plot1",#
               title = 'Info',#
               content="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
               placement = 'bottom',#
               trigger = 'click')#
}#
#
app <- shinyApp(ui = ui, server = server)#
#
runApp(app)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    addPopover(session,#
               id = "plot1",#
               title = 'Info',#
               content="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
               trigger = 'click')#
}#
#
app <- shinyApp(ui = ui, server = server)#
#
runApp(app)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_fluid(#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    # addPopover(session,#
    #            id = "plot1",#
    #            title = 'Info',#
    #            content="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
    #            trigger = 'click')#
    addPopover(session, "plot1", "Data", content = paste0("<p>Waiting time between ",#
     "eruptions and the duration of the eruption for the Old Faithful geyser ",#
     "in Yellowstone National Park, Wyoming, USA.</p><p>Azzalini, A. and ",#
     "Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. ",#
     "Applied Statistics 39, 357-365.</p>"), trigger = 'click')#
}#
#
app <- shinyApp(ui = ui, server = server)#
#
runApp(app)
library(shiny)#
library(shinyBS)#
#
app = shinyApp(#
 ui =#
 fluidPage(#
   sidebarLayout(#
     sidebarPanel(#
       sliderInput("bins",#
                   "Number of bins:",#
                   min = 1,#
                   max = 50,#
                   value = 30),#
       bsTooltip("bins", "The wait times will be broken into this many equally spaced bins",#
         "right", options = list(container = "body"))#
     ),#
     mainPanel(#
       plotOutput("distPlot"),#
       uiOutput("uiExample")#
     )#
   )#
 ),#
 server =#
 function(input, output, session) {#
   output$distPlot <- renderPlot({#
#
     # generate bins based on input$bins from ui.R#
     x    <- faithful[, 2]#
     bins <- seq(min(x), max(x), length.out = input$bins + 1)#
#
     # draw the histogram with the specified number of bins#
     hist(x, breaks = bins, col = 'darkgray', border = 'white')#
#
   })#
   output$uiExample <- renderUI({#
     tags$span(#
       popify(bsButton("pointlessButton", "Button", style = "primary", size = "large"),#
         "A Pointless Button",#
         "This button is <b>pointless</b>. It does not do <em>anything</em>!"),#
       tipify(bsButton("pB2", "Button", style = "inverse", size = "extra-small"),#
         "This button is pointless too!")#
     )#
   })#
   addPopover(session, "distPlot", "Data", content = paste0("<p>Waiting time between ",#
     "eruptions and the duration of the eruption for the Old Faithful geyser ",#
     "in Yellowstone National Park, Wyoming, USA.</p><p>Azzalini, A. and ",#
     "Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. ",#
     "Applied Statistics 39, 357-365.</p>"), trigger = 'click')#
 }#
)#
## Not run: #
 runApp(app)#
#
## End(Not run)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_sidebar(#
                   sidebar=sidebar(),#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    # addPopover(session,#
    #            id = "plot1",#
    #            title = 'Info',#
    #            content="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
    #            trigger = 'click')#
    addPopover(session, "plot1", "Data", content = paste0("<p>Waiting time between ",#
     "eruptions and the duration of the eruption for the Old Faithful geyser ",#
     "in Yellowstone National Park, Wyoming, USA.</p><p>Azzalini, A. and ",#
     "Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. ",#
     "Applied Statistics 39, 357-365.</p>"), trigger = 'click')#
}#
#
app <- shinyApp(ui = ui, server = server)#
#
runApp(app)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_sidebar(#
                   sidebar=sidebar(),#
  plotOutput('plot1')#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    # addPopover(session,#
    #            id = "plot1",#
    #            title = 'Info',#
    #            content="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
    #            trigger = 'click')#
    shinyBS::addPopover(session, "plot1", "Data", content = paste0("<p>Waiting time between ",#
     "eruptions and the duration of the eruption for the Old Faithful geyser ",#
     "in Yellowstone National Park, Wyoming, USA.</p><p>Azzalini, A. and ",#
     "Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. ",#
     "Applied Statistics 39, 357-365.</p>"), trigger = 'click')#
}#
#
app <- shinyApp(ui = ui, server = server)#
#
runApp(app)
library(shiny)#
library(bslib)#
library(shinyBS)#
#
ui <- page_sidebar(#
                   sidebar=sidebar(),#
  plotOutput('distPlot')#
)#
#
server <- function(input,output,session){#
    output$distPlot <- renderPlot({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    # addPopover(session,#
    #            id = "distPlot",#
    #            title = 'Info',#
    #            content="<p>This is a plot of Sepal Length and Sepal Width from the iris dataset</p>", #
    #            trigger = 'click')#
    shinyBS::addPopover(session, "distPlot", "Data", content = paste0("<p>Waiting time between ",#
     "eruptions and the duration of the eruption for the Old Faithful geyser ",#
     "in Yellowstone National Park, Wyoming, USA.</p><p>Azzalini, A. and ",#
     "Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. ",#
     "Applied Statistics 39, 357-365.</p>"), trigger = 'click')#
}#
#
app <- shinyApp(ui = ui, server = server)#
#
runApp(app)
?reactiveValues
?reactive
?observe
x <- list(a = 1, b = 2, c = 3)
x
paste(x,collapse=',')
?nearPoints
shiny::runApp("03_tooltips_plotly")
library('plotly')
shiny::runApp("03_tooltips_plotly")
library(shiny)#
library(bslib)#
library(plotly)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2'),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
         palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
}#
#
shinyApp(ui = ui, server = server)
?plotly
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2',#
                 plotlyOutput('plot2')),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_scatter()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
}#
#
shinyApp(ui = ui, server = server)
?geom_point
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2',#
                 plotlyOutput('plot2')),#
            col_widths = c(6,6)#
            )#
         ),#
    col_widths=c(4,8)#
    )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2',#
                 plotlyOutput('plot2')),#
            col_widths = c(2,6)#
            )#
         ),#
    col_widths=c(6,6)#
    )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 layout_sidebar(#
                   fillable = TRUE,#
                   sidebar=sidebar(#
                           actionButton("btn", "A button")#
                                   )#
                )),#
            card('2.2',#
                 plotlyOutput('plot2')),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    )#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover'))#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot13 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(iris, input$plote_hover)#
  })#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    )#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover'))#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot13 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(iris, input$plote_hover)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    )#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot13 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(iris, input$plote_hover)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot13 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(iris, input$plote_hover)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot3 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(iris, input$plote_hover)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
          ),#
     card('Card 4'#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot3 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(iris, input$plote_hover)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
          ),#
     card('Card 4',#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot3 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(iris, input$plote_hover)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
          ),#
     card('Card 4',#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot3 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(iris, input$plot3_hover)#
    })#
}#
#
shinyApp(ui = ui, server = server)
?nearPoints
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
          ),#
     card('Card 4',#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot3 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(df = iris, #
                   xvar = 'Sepal.Length',#
                   yvar = 'Sepal.Width',#
                   coordinfo = input$plot3_hover)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
    card(#
         card_header(#
        tooltip(#
          span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
          "This is the iris dataset",#
          placement = "right"#
        )#
        ),#
        plotlyOutput('plot1')#
    ),#
    card('Card 2',#
         layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
         ),#
    col_widths=c(6,6)#
    ),#
  layout_column_wrap(#
     card('Card 3',#
          tooltip(#
            plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
            'This is a plot of the iris dataset',#
            placement = 'right')#
          ),#
     card('Card 4',#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
    output$plot1 <- renderPlotly({#
        g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
        p <-  g + geom_point()#
        ggplotly(p)#
    })#
    output$plot2 <- renderPlotly({#
        g <- ggplot(iris, aes(Species))  #
        p <-  g + geom_bar()#
#
        ggplotly(p)#
    })#
    output$plot3 <- renderPlot({#
        palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
        plot(iris[,1],iris[,2],pch=16,#
             col = iris$Species)#
    })#
    output$plot3_table <- renderTable({#
        req(input$plot3_hover)#
        nearPoints(df = iris, #
                   xvar = 'Sepal.Length',#
                   yvar = 'Sepal.Width',#
                   coordinfo = input$plot3_hover)#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
ui <- page_fixed(#
  actionButton("show", "Show modal dialog")#
)#
server <- function(input, output, session) {#
  observeEvent(input$show,{ #
    showModal( #
      modalDialog( #
        title = "Somewhat important message", #
        easy_close = TRUE, #
        "This is your important message." #
      ) #
    ) #
  })#
}#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
ui <- page_fixed(#
  card(actionButton("show", "Show modal dialog"))#
)#
server <- function(input, output, session) {#
  observeEvent(input$show,{ #
    showModal( #
      modalDialog( #
        title = "Somewhat important message", #
        easy_close = TRUE, #
        "This is your important message." #
      ) #
    ) #
  })#
}#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
ui <- page_fixed(#
	fixedRow(),#
  card(actionButton("show", "Show modal dialog"))#
)#
server <- function(input, output, session) {#
  observeEvent(input$show,{ #
    showModal( #
      modalDialog( #
        title = "Somewhat important message", #
        easy_close = TRUE, #
        "This is your important message." #
      ) #
    ) #
  })#
}#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
ui <- page_fixed(#
	fixedRow(card()),#
  card(actionButton("show", "Show modal dialog"))#
)#
server <- function(input, output, session) {#
  observeEvent(input$show,{ #
    showModal( #
      modalDialog( #
        title = "Somewhat important message", #
        easy_close = TRUE, #
        "This is your important message." #
      ) #
    ) #
  })#
}#
shinyApp(ui, server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
 	card(#
 	     card_header(#
		tooltip(#
		  span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
		  "This is the iris dataset",#
		  placement = "right"#
		)#
		),#
		plotlyOutput('plot1')#
	),#
 	card('Card 2',#
 	     layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
 	     ),#
 	col_widths=c(6,6)#
	),#
  layout_column_wrap(#
     card('Card 3',#
          tooltip(#
          	plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
          	'This is a plot of the iris dataset',#
          	placement = 'right')#
          ),#
     card('Card 4',#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
	output$plot1 <- renderPlotly({#
		g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
		p <-  g + geom_point()#
		ggplotly(p)#
	})#
	output$plot2 <- renderPlotly({#
		g <- ggplot(iris, aes(Species))  #
		p <-  g + geom_bar()#
#
		ggplotly(p)#
	})#
	output$plot3 <- renderPlot({#
		palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
		plot(iris[,1],iris[,2],pch=16,#
		     col = iris$Species)#
	})#
	output$plot3_table <- renderTable({#
    	req(input$plot3_hover)#
    	nearPoints(df = iris, #
    	           xvar = 'Sepal.Length',#
    	           yvar = 'Sepal.Width',#
    	           coordinfo = input$plot3_hover)#
	})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
  url <- url("https://github.com/zsiders/BuildingRShinyCourse/raw/refs/heads/main/Day%201%20-%20Introduction/First%20Example/Meiri_Lizard_traits.csv")#
  lizard <- read.csv(url)#
#
  nvars <- colnames(lizard)[sapply(lizard,is.numeric)]#
  #clean up names#
  nvars <- tools::toTitleCase(gsub("\\.|\\.\\."," ",nvars))#
  nvars <- gsub('Tb','Body Temp.',nvars)#
  nvars[5] <- 'Body Allometry'#
  colnames(lizard)[sapply(lizard,is.numeric)] <- nvars#
  nvars <- nvars[-c(1:4)]#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
ui <- page_sidebar(#
  title = 'Traits of lizards of the world: k-means clustering',#
  sidebar = sidebar(#
    selectInput('xcol', 'First Trait', nvars,#
                selected = nvars[1]),#
    selectInput('ycol', 'Second Trait', nvars,#
                selected = nvars[9]),#
    numericInput('clusters', 'Number of Clusters',#
                 3, min = 1, max = 9)#
  ),#
  card(#
    card_header("Bivariate k-means"),#
    plotOutput('plot1')#
  )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session) {#
#
  # Combine the selected variables into a new data frame#
  selectedData <- reactive({#
    na.omit(lizard[, c(input$xcol, input$ycol)])#
  })#
#
  clusters <- reactive({#
    kmeans(selectedData(), input$clusters)#
  })#
#
  output$plot1 <- renderPlot({#
    palette(viridisLite::viridis(nrow(clusters()$centers)))#
#
    par(mar = c(5.1, 4.1, 0, 1),#
        cex.axis = 1.2)#
    plot(selectedData(),#
         col = clusters()$cluster,#
         pch = 20, cex = 3, las = 1)#
    points(clusters()$centers, pch = 4, cex = 4, lwd = 4,#
           col = 'red')#
  })#
#
}#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
  url <- url("https://github.com/zsiders/BuildingRShinyCourse/raw/refs/heads/main/Day%201%20-%20Introduction/First%20Example/Meiri_Lizard_traits.csv")#
  lizard <- read.csv(url)#
#
  nvars <- colnames(lizard)[sapply(lizard,is.numeric)]#
  #clean up names#
  nvars <- tools::toTitleCase(gsub("\\.|\\.\\."," ",nvars))#
  nvars <- gsub('Tb','Body Temp.',nvars)#
  nvars[5] <- 'Body Allometry'#
  colnames(lizard)[sapply(lizard,is.numeric)] <- nvars#
  nvars <- nvars[-c(1:4)]#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
ui <- page_sidebar(#
  title = 'Traits of lizards of the world: k-means clustering',#
  sidebar = sidebar(#
    selectInput('xcol', 'First Trait', nvars,#
                selected = nvars[1]),#
    selectInput('ycol', 'Second Trait', nvars,#
                selected = nvars[9]),#
    numericInput('clusters', 'Number of Clusters',#
                 3, min = 1, max = 9)#
  ),#
  card(#
    card_header("Bivariate k-means"),#
    plotOutput('plot1')#
  )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session) {#
#
  selectedData <- reactiveValues()#
  observe({#
    selectedData$df <- na.omit(lizard[, c(input$xcol, input$ycol)])#
  })#
#
  # Combine the selected variables into a new data frame#
  # selectedData <- reactive({#
      # na.omit(lizard[, c(input$xcol, input$ycol)])#
  # })#
#
  clusters <- reactive({#
    kmeans(selectedData$df, input$clusters)#
  })#
#
  output$plot1 <- renderPlot({#
    palette(viridisLite::viridis(nrow(clusters()$centers)))#
#
    par(mar = c(5.1, 4.1, 0, 1),#
        cex.axis = 1.2)#
    plot(selectedData(),#
         col = clusters()$cluster,#
         pch = 20, cex = 3, las = 1)#
    points(clusters()$centers, pch = 4, cex = 4, lwd = 4,#
           col = 'red')#
  })#
#
}#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
  url <- url("https://github.com/zsiders/BuildingRShinyCourse/raw/refs/heads/main/Day%201%20-%20Introduction/First%20Example/Meiri_Lizard_traits.csv")#
  lizard <- read.csv(url)#
#
  nvars <- colnames(lizard)[sapply(lizard,is.numeric)]#
  #clean up names#
  nvars <- tools::toTitleCase(gsub("\\.|\\.\\."," ",nvars))#
  nvars <- gsub('Tb','Body Temp.',nvars)#
  nvars[5] <- 'Body Allometry'#
  colnames(lizard)[sapply(lizard,is.numeric)] <- nvars#
  nvars <- nvars[-c(1:4)]#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
ui <- page_sidebar(#
  title = 'Traits of lizards of the world: k-means clustering',#
  sidebar = sidebar(#
    selectInput('xcol', 'First Trait', nvars,#
                selected = nvars[1]),#
    selectInput('ycol', 'Second Trait', nvars,#
                selected = nvars[9]),#
    numericInput('clusters', 'Number of Clusters',#
                 3, min = 1, max = 9)#
  ),#
  card(#
    card_header("Bivariate k-means"),#
    plotOutput('plot1')#
  )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session) {#
#
  selectedData <- reactiveValues()#
  observe({#
    selectedData$df <- na.omit(lizard[, c(input$xcol, input$ycol)])#
  })#
#
  # Combine the selected variables into a new data frame#
  # selectedData <- reactive({#
      # na.omit(lizard[, c(input$xcol, input$ycol)])#
  # })#
#
  clusters <- reactive({#
    kmeans(selectedData$df, input$clusters)#
  })#
#
  output$plot1 <- renderPlot({#
    palette(viridisLite::viridis(nrow(clusters()$centers)))#
#
    par(mar = c(5.1, 4.1, 0, 1),#
        cex.axis = 1.2)#
    plot(selectedData$df,#
         col = clusters()$cluster,#
         pch = 20, cex = 3, las = 1)#
    points(clusters()$centers, pch = 4, cex = 4, lwd = 4,#
           col = 'red')#
  })#
#
}#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
shinyApp(ui = ui, server = server)
##
# This is a Shiny web application. You can run the application by clicking#
# the 'Run App' button above.#
##
# Find out more about building applications with Shiny here:#
##
#    http://shiny.rstudio.com/#
##
#
library(shiny)#
library(shinyWidgets)#
#
# upfront -----------------------------------------------------------------#
    s.min <- 10#
    s.max <- 1000#
    S.pred <- seq(s.min, s.max, by=1)#
    sim.S <- function(){#
        S <- floor(runif(30, s.min, s.max))#
        return(S)#
    }#
    sim.Ricker <- function(S, a, b, sigma){#
        Rhat <- a*S*exp(-b*S)#
        R <- floor(rlnorm(30, meanlog=log(Rhat), sdlog=sigma))#
        return(data.frame(R=R, S=S))#
    }#
    sim.BH <- function(S,a, b, sigma){#
        Rhat <- a*S/(1+b*S)#
        R <- floor(rlnorm(30, meanlog=log(Rhat), sdlog=sigma))#
        return(data.frame(R=R, S=S))#
    }#
    fun.ricker <- function(theta, S, R){#
        a <- exp(theta[1])#
        b <- exp(theta[2])#
        sd <- exp(theta[3])#
        predR <- a*S*exp(-b*S)#
        #notice we use the log mean here#
        nll <- -sum(dlnorm(R, mean=log(predR), sd=sd, log=T))#
        return(nll)#
    }#
    fit.Ricker <- function(S, R){#
        logrps <- log(R/S)#
        fit_mult_lin <- lm(logrps~S)#
        summary(fit_mult_lin)#
        coef_lin <- coef(fit_mult_lin)#
        apar <- exp(coef_lin[1])#
        bpar <- -coef_lin[2]#
        theta = c(log(apar), log(bpar), log(0.5))#
        #procedure section#
        fit = optim(theta, fun.ricker, S=S, R=R, method='BFGS', hessian=T)#
        fit1 = optim(fit$par, fun.ricker, S=S, R=R, method='Nelder-Mead', hessian=T)#
        return(fit1$par)#
    }#
    pred.Ricker <- function(fit.par, S.pred){#
        par <- exp(fit.par)#
        pred <- par[1]*S.pred*exp(-par[2]*S.pred)#
        return(pred)#
    }#
    fun.bh <- function(theta, S, R){#
        a <- exp(theta[1])#
        b <- exp(theta[2])#
        sd <- exp(theta[3])#
        predR <- a*S/(1+b*S)#
        #notice we use the log mean here#
        nll <- -sum(dlnorm(R, mean=log(predR), sd=sd, log=T))#
        return(nll)#
    }#
    fit.BH <- function(S, R){#
        theta = c(log(30), log(0.001), log(0.5))#
        #procedure section#
        fit = optim(theta, fun.bh, S=S, R=R, method='BFGS', hessian=T)#
        fit1 = optim(fit$par, fun.bh, S=S, R=R, method='Nelder-Mead', hessian=T)#
        return(fit1$par)#
    }#
    pred.BH <- function(fit.par, S.pred){#
        par <- exp(fit.par)#
        pred <- par[1]*S.pred/(1+par[2]*S.pred)#
        return(pred)#
    }#
#
# shiny -------------------------------------------------------------------#
#
# Define UI for application that draws a histogram#
ui <- fluidPage(#
    tags$head(#
        tags$style(HTML("@import url('//fonts.googleapis.com/css?family=Lobster|Cabin:400,700');#
                    h2 {font-family: 'Lobster', cursive;#
                    font-weight: 500; line-height: 1.1;}"))),#
    # Application title#
    titlePanel("Exploring Stock-Recruit Relationships"),#
    br(),#
    withMathJax(),#
    fluidRow(#
          column(width = 12, align='center',#
                 actionBttn('simulate',#
                            label='Simulate',#
                            style='material-flat',#
                            color='success',#
                            size='sm'))),#
    fluidRow(#
            column(width=4, align='center',#
                 h5("Ricker \\(\\theta\\)"),#
                 sliderInput('ricker_a',#
                             label = em('a'),#
                             min = 5, max=40, step=5, value=20),#
                 sliderInput('ricker_b',#
                             label = em('b'),#
                             min = 0.0002, max=0.003, step=0.0002, value=0.0024),#
                 sliderInput('ricker_sigma',#
                             label="\\(\\sigma\\)",#
                             min = 0.05, max=1, step=0.05, value=0.2)),#
            column(width=5, align='center',#
                   br(),#
                   br(),#
                   plotOutput("rick_plot", height="300px", #
                              hover=hoverOpts(id='rick_hover',#
                                              delay=100))),#
            column(width=3, align='center',#
                   br(),#
                   h6("Observed:"),#
                   verbatimTextOutput('rick_obsS_text'),#
                   verbatimTextOutput('rick_obsR_text'),#
                   br(),#
                   h6("Predicted:"),#
                   verbatimTextOutput('rick_predS_text'),#
                   verbatimTextOutput('rick_predR_text'))#
          ),#
    fluidRow(#
        column(width=4, align='center',#
                h5("Beverton-Holt \\(\\theta\\)"),#
                sliderInput('bh_a',#
                            label = em('a'),#
                            min = 5, max=40, step=5, value=20),#
                sliderInput('bh_b',#
                            label = em('b'),#
                            min = 0.001, max=0.03, step=0.001, value=0.02),#
                sliderInput('bh_sigma',#
                            label="\\(\\sigma\\)",#
                            min = 0.05, max=1, step=0.05, value=0.2)),#
        column(width=5, align='center',#
               br(),#
               br(),#
               plotOutput("bh_plot", height="300px", #
                          hover=hoverOpts(id='bh_hover',#
                                          delay=100))),#
        column(width=3, align='center',#
               br(),#
               h6("Observed:"),#
               verbatimTextOutput('bh_obsS_text'),#
               verbatimTextOutput('bh_obsR_text'),#
               br(),#
               h6("Predicted:"),#
               verbatimTextOutput('bh_predS_text'),#
               verbatimTextOutput('bh_predR_text'))#
    ),#
    fluidRow(br(),br())#
)#
#
# Define server logic required to draw a histogram#
server <- function(input, output){#
    rickerListen <- reactive({#
        list(input$simulate,input$ricker_a, input$ricker_b, input$ricker_sigma)#
    })#
    bhListen <- reactive({#
        list(input$simulate,input$bh_a, input$bh_b, input$bh_sigma)#
    })#
    S <- reactive({#
        input$simulate#
        sim.S()#
    })#
    rick.n <- reactiveValues()#
    observeEvent(rickerListen(),{#
        rick.n$data <- sim.Ricker(S(), input$ricker_a, input$ricker_b, input$ricker_sigma)#
        rick.n$fit <- fit.Ricker(rick.n$data$S, rick.n$data$R)#
        rick.n$pred <- floor(pred.Ricker(rick.n$fit, S.pred))#
        rick.n$bh.fit <- fit.BH(rick.n$data$S, rick.n$data$R)#
        rick.n$bh.pred <- floor(pred.BH(rick.n$bh.fit, S.pred))#
        rick.n$pt <- NULL#
        rick.n$pt2 <- NULL#
    })#
    bh.n <- reactiveValues()#
    observeEvent(bhListen(),{#
        bh.n$data <- sim.BH(S(), input$bh_a, input$bh_b, input$bh_sigma)#
        bh.n$fit <- fit.BH(bh.n$data$S, bh.n$data$R)#
        bh.n$pred <- floor(pred.BH(bh.n$fit, S.pred))#
        bh.n$rick.fit <- fit.Ricker(bh.n$data$S, bh.n$data$R)#
        bh.n$rick.pred <- floor(pred.Ricker(bh.n$rick.fit, S.pred))#
        bh.n$pt <- NULL#
        bh.n$pt2 <- NULL#
    })#
    observeEvent(input$rick_hover,{#
        tmp <- data.frame(S=rick.n$data$S, R=rick.n$data$R/1000)#
        tmp2 <- data.frame(S=S.pred, R=rick.n$pred/1000)#
        rick.n$pt <- nearPoints(tmp, input$rick_hover, threshold = 20, maxpoints = 1,#
                         addDist = FALSE, xvar="S", yvar='R', allRows=TRUE)#
        rick.n$pt2 <- nearPoints(tmp2, input$rick_hover, threshold = 20, maxpoints = 1,#
                                addDist = FALSE, xvar="S", yvar='R', allRows=TRUE)#
    })#
    observeEvent(input$bh_hover,{#
        tmp <- data.frame(S=bh.n$data$S, R=bh.n$data$R/1000)#
        tmp2 <- data.frame(S=S.pred, R=bh.n$pred/1000)#
        bh.n$pt <- nearPoints(tmp, input$bh_hover, threshold = 20, maxpoints = 1,#
                                addDist = FALSE, xvar="S", yvar='R', allRows=TRUE)#
        bh.n$pt2 <- nearPoints(tmp2, input$bh_hover, threshold = 20, maxpoints = 1,#
                              addDist = FALSE, xvar="S", yvar='R', allRows=TRUE)#
    })#
    output$rick_plot <- renderPlot({#
        par(mar=c(4,4,1,1),las=1)#
        plot(rick.n$data$S, rick.n$data$R/1000,#
             xlab="Stock", ylab="Recruits (1000's)",#
             pch=16, main='Ricker SRR', col='firebrick3')#
        lines(S.pred, rick.n$pred/1000, col='firebrick4', lwd=3)#
        lines(S.pred, rick.n$bh.pred/1000, col='dodgerblue4', lwd=2, lty=3)#
        points(rick.n$pt[rick.n$pt$selected_,1], rick.n$pt[rick.n$pt$selected_,2],#
               pch=4, col='firebrick3', cex=1.5, lwd=2)#
        points(rick.n$pt2[rick.n$pt2$selected_,1], rick.n$pt2[rick.n$pt2$selected_,2],#
               pch=4, col='firebrick4', cex=1.5, lwd=2)#
    })#
    output$bh_plot <- renderPlot({#
        par(mar=c(4,4,1,1),las=1)#
        plot(bh.n$data$S, bh.n$data$R/1000,#
             xlab="Stock", ylab="Recruits (1000's)",#
             pch=16, main='Beverton-Holt SRR', col='dodgerblue3')#
        lines(S.pred, bh.n$pred/1000, col='dodgerblue4', lwd=3)#
        lines(S.pred, bh.n$rick.pred/1000, col='firebrick4', lwd=2, lty=3)#
        points(bh.n$pt[bh.n$pt$selected_,1], bh.n$pt[bh.n$pt$selected_,2],#
               pch=4, col='dodgerblue3', cex=1.5, lwd=2)#
        points(bh.n$pt2[bh.n$pt2$selected_,1], bh.n$pt2[bh.n$pt2$selected_,2],#
               pch=4, col='dodgerblue4', cex=1.5, lwd=2)#
    })#
    output$rick_obsS_text <- renderText({#
        if(any(rick.n$pt$selected_)){#
            txt <- paste0('Stock = ', rick.n$pt[rick.n$pt$selected_,1])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$rick_obsR_text <- renderText({#
        if(any(rick.n$pt$selected_)){#
            txt <- paste0('Recruits = ', rick.n$pt[rick.n$pt$selected_,2])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$rick_predS_text <- renderText({#
        if(any(rick.n$pt2$selected_)){#
            txt <- paste0('Stock = ', rick.n$pt2[rick.n$pt2$selected_,1])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$rick_predR_text <- renderText({#
        if(any(rick.n$pt2$selected_)){#
            txt <- paste0('Recruits = ', rick.n$pt2[rick.n$pt2$selected_,2])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$bh_obsS_text <- renderText({#
        if(any(bh.n$pt$selected_)){#
            txt <- paste0('Stock = ', bh.n$pt[bh.n$pt$selected_,1])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$bh_obsR_text <- renderText({#
        if(any(bh.n$pt$selected_)){#
            txt <- paste0('Recruits = ', bh.n$pt[bh.n$pt$selected_,2])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$bh_predS_text <- renderText({#
        if(any(bh.n$pt2$selected_)){#
            txt <- paste0('Stock = ', bh.n$pt2[bh.n$pt2$selected_,1])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$bh_predR_text <- renderText({#
        if(any(bh.n$pt2$selected_)){#
            txt <- paste0('Recruits = ', bh.n$pt2[bh.n$pt2$selected_,2])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
}#
#
# Run the application #
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot')#
)#
#
server <- function(input,output,session){#
    sim1 <- reactive({#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
}#
#
shinyApp(ui = ui, server = server)
##
# This is a Shiny web application. You can run the application by clicking#
# the 'Run App' button above.#
##
# Find out more about building applications with Shiny here:#
##
#    http://shiny.rstudio.com/#
##
#
library(shiny)#
library(DT)#
library(lme4)#
library(viridis)#
col2rgbA<-function(color,transparency)#
{#
  rgb(t(col2rgb(color))/255,alpha=transparency)#
}#
#
age <- read.table("griffin age data.txt", header=TRUE, quote="\"", na.strings=".")#
trawl <- read.table("griffin trawl data.txt", header=TRUE, quote="\"", na.strings=".")#
trap <- read.table("trap net data.txt", header=TRUE, quote="\"", na.strings=".")#
catch <- rbind(#
  data.frame(Gear = trap$Gear,#
             TL = trap$TL),#
  data.frame(Gear = rep("trawl",nrow(trawl)),#
             TL = trawl$TL))#
age.list <- as.list(seq(min(age$Rings, na.rm=T), max(age$Rings, na.rm=T)))#
names(age.list) <- paste0("Age ", seq(min(age$Rings, na.rm=T),max(age$Rings, na.rm=T)))#
# Define UI for application that draws a histogram#
ui <- fluidPage(#
  # titlePanel("Comparing growth between Spotted Seatrout populations", windowTitle="Lab 2 Part 1"),#
  tags$head(#
    tags$style(HTML("@import url('//fonts.googleapis.com/css?family=Lobster|Cabin:400,700');#
                    h1 {font-family: 'Lobster', cursive;#
                    font-weight: 500; line-height: 1.1;}"))),#
  headerPanel("Determining mortality in Black Crappie"),#
  withMathJax(),#
  sidebarLayout(position="left",#
                sidebarPanel(#
                  selectInput('ttw', label="Gear to use:", #
                              choices=list(Whole = 'whole',#
                                          Trapnet='trapnet',#
                                           Trawl = 'trawl'),#
                              selected="whole"),#
                  selectInput('fAge', label="First vulnerable age",#
                              choices = age.list$l,#
                              selected = 0),#
                  selectInput('lAge', label="Last vulnerable age",#
                              choices = age.list$l,#
                              selected = 1),#
                  selectInput('alpha', label = "\\(\\alpha\\) Value",#
                              choices = list(0.1,0.05,0.01,0.001),#
                              selected = 0.05),#
                  style = "position:fixed;width:28%;"),#
                mainPanel(#
                  tabsetPanel(#
                    tabPanel("ALK",#
                      plotOutput(outputId = 'ALK_plot')#
                          ),#
                    tabPanel("Merged",#
                             plotOutput(outputId = 'Hist_merge'),#
                             DTOutput("datatable")),#
                    tabPanel("Catch Curve",#
                             plotOutput(outputId = "CAA_plot"),#
                             br(),#
                             uiOutput(outputId = "CAA_tab"),#
                             align='center'),#
                    tabPanel("Millar Catch Curve",#
                             plotOutput(outputId = 'Millar_plot'),#
                             br(),#
                             uiOutput(outputId = "Millar_tab"),#
                             br(),#
                             actionButton(inputId='ab1', label="Go to paper", #
                                          icon = icon("file-alt"), #
                                          onclick ="window.open('https://www.nrcresearchpress.com/doi/abs/10.1139/cjfas-2014-0193#.XpCKSi3Myu4', '_blank')"),#
                             align='center')#
                    ))#
      )#
)#
# Define server logic required to draw a histogram#
server <- function(input, output, session) {#
  ALK <- reactiveValues()#
  observeEvent(input$ttw,{#
    if(input$ttw!='whole')#
    {#
      tmp <- age[age$Gear==input$ttw,] #subset#
    }else{#
      tmp <- age#
    }#
   tmp$cmgrp <- floor(tmp$TL/10) #make centimeter groups#
    # proportion at age#
    ALK$ALK <- data.frame(prop.table(table(tmp$Rings,tmp$cmgrp),margin=2))#
    names(ALK$ALK)<-c("age","cmgrp","prop")#
    ALK$ALK$age <- as.integer(as.character(ALK$ALK$age))#
    ALK$ALK$cmgrp <- as.integer(as.character(ALK$ALK$cmgrp))#
    data <- switch(input$ttw,#
                   'whole' = na.omit(catch),#
                   'trapnet' = na.omit(catch[catch$Gear == 'trapnet',]),#
                   'trawl' = na.omit(catch[catch$Gear == 'trawl',]))#
    data$cmgrp <- floor(data$TL/10)#
    # make a table of centimeter groups#
    NL <- data.frame(table(data$cmgrp))  #
    colnames(NL) <- c('cmgrp','count')#
    mergeD <- merge(ALK$ALK,NL)#
    mergeD$N <- mergeD$prop * mergeD$count#
    ALK$mergeD <- mergeD#
    # Catch Curve#
    ALK$CAA <- tapply(ALK$mergeD$N, list(ALK$mergeD$age),sum)#
    ALK$lnCAA <- log(ALK$CAA)#
    l <- as.list(seq(min(ALK$mergeD$age, na.rm=T), max(ALK$mergeD$age, na.rm=T)))#
    names(l) <- paste0("Age ", seq(min(ALK$mergeD$age, na.rm=T), max(ALK$mergeD$age, na.rm=T)))#
    updateSelectInput(session, #
                      inputId = 'fAge',#
                      label="First vulnerable age",#
                      choices = l[-length(l)],#
                      selected = min(ALK$mergeD$age, na.rm=T))#
    updateSelectInput(session, #
                      inputId = 'lAge',#
                      label="Last vulnerable age",#
                      choices = l[-1],#
                      selected = max(ALK$mergeD$age, na.rm=T))#
  })#
  output$datatable <- renderDT({#
    sapply(ALK$mergeD[ALK$mergeD$prop != 0,], round, digits=2)}, #
    server = FALSE, colnames=c("Length group", "Age", "Proportion", "Count", "N")#
  )#
  output$ALK_plot <- renderPlot({#
    ALK.sub <- ALK$ALK[ALK$ALK$prop!=0,]#
    ALK.col <- sapply(ALK.sub$prop, function(x) which.min(abs(x - seq(0,1,by=.01))))#
    par(mar=c(4.3,4,1,1))#
    plot(0,0,type='n',xlim=c(-0.5, 7.5), ylim=c(5,36), las=1,#
         xlab='Age', ylab='Centimeter Group', cex.axis=1.2, cex.lab=1.2)#
    ALK.grid <- expand.grid(age = seq(min(ALK$ALK$age), max(ALK$ALK$age)),#
                            cmgrp = seq(min(ALK$ALK$cmgrp), max(ALK$ALK$cmgrp)))#
    with(ALK.grid, points(age, cmgrp, pch="+", cex=0.5))#
    with(ALK.sub, symbols(age, cmgrp, circles=prop/4, #
                          inches=FALSE, bg = plasma(101, alpha=0.3)[ALK.col],#
                          las=1, add=TRUE))#
    rect(6.5,5,7.7,20,col='white',border='gray80')#
    symbols(rep(6.8,4), c(6.2,8.7,11.7,15), circles=seq(0.25,1,by=0.25)/4, #
            bg = plasma(101, alpha=0.7)[sapply(seq(0.25,1,by=0.25), function(x) which.min(abs(x-seq(0,1,by=.01))))], add=TRUE, inches=FALSE)#
    text(rep(7.4,4), c(6.2,8.7,11.7,15), #
         formatC(seq(0.25, 1,by=0.25), width=2, flag="0", format='f', digits=2),#
         font=1, cex=1.2)#
    text(7.1, 18, "Proportion", font=2)#
  })#
  output$Hist_merge <- renderPlot({#
    agg.m <- t(aggregate(N~age, data=ALK$mergeD, FUN=sum)[,2])#
    names(agg.m) <- seq(min(ALK$ALK$age), max(ALK$ALK$age))#
    barplot(agg.m, xlab = "Age", ylab="Frequency", #
            names.arg=names(agg.m), col='gray80', las=1)#
  })#
  output$CAA_plot <- renderPlot({#
    mFage <- match(input$fAge, names(ALK$lnCAA))#
    mLage <- match(input$lAge, names(ALK$lnCAA))#
    if(any(tryCatch(lm(ALK$lnCAA[mFage:mLage]~as.numeric(names(ALK$lnCAA)[mFage:mLage])),#
                error = function(e){"ERROR"})=="ERROR")){#
      return()#
    }else{#
    fit <- lm(ALK$lnCAA[mFage:mLage]~as.numeric(names(ALK$lnCAA)[mFage:mLage]))#
    pred <- fit$coef[1] + fit$coef[2] * seq(min(ALK$ALK$age), max(ALK$ALK$age))#
    plot(ALK$lnCAA~names(ALK$lnCAA), xlab="Age", ylab="log(Frequency)",#
         las=1, cex.axis=1.2, cex.lab=1.2, pch=16, cex=1.4, col='navyblue', #
         xlim = c(0,7), ylim=c(0,7))#
    abline(h=log(5))#
    points(c(input$fAge, input$lAge),#
           ALK$lnCAA[c(mFage,mLage)], pch=21, cex=2, bg='firebrick3', col='navyblue')#
    lines(seq(min(ALK$ALK$age), max(ALK$ALK$age)),#
         pred, lwd=3, col='darkorange')#
    }#
  })#
#
  output$CAA_tab <- renderUI({#
    mFage <- match(input$fAge, names(ALK$lnCAA))#
    mLage <- match(input$lAge, names(ALK$lnCAA))#
    if(any(tryCatch(lm(ALK$lnCAA[mFage:mLage]~as.numeric(names(ALK$lnCAA)[mFage:mLage])),#
                    error = function(e){"ERROR"})=="ERROR")){#
      return()#
    }else{#
    fit <- lm(ALK$lnCAA[mFage:mLage]~as.numeric(names(ALK$lnCAA)[mFage:mLage]))#
    coef_tab <- summary(fit)$coef#
    Z <- -coef_tab[2,1]#
    Zster <- coef_tab[2,2]#
    alpha <- as.numeric(input$alpha)#
    Zl95 <- Z - qnorm(1-(alpha/2))*Zster#
    Zu95 <- Z + qnorm(1-(alpha/2))*Zster#
    Al95 <- 1-exp(-Zl95)#
    A <- 1-exp(-Z)#
    Au95 <- 1-exp(-Zu95)#
    Sl95 <- 1-Al95#
    S <- 1-A#
    Su95 <- 1-Au95#
    d <- data.frame(Value = c("\\hat{\\theta}",#
                              paste0("\\theta\\ lower\\ ", (1-alpha)*100,"\\%"),#
                              paste0("\\theta\\  upper\\ ", (1-alpha)*100,"\\%")),#
                    Z = c(Z, Zl95, Zu95),#
                    A = c(A,Al95,Au95),#
                    S = c(S,Sl95,Su95))#
    colnames(d)[1] <- " "#
    #Robson-Chapman#
    if(as.numeric(input$fAge)!=0)#
    {#
      code_age <- seq(0,(length(ALK$CAA)-(as.numeric(input$fAge)-0)))#
      xN <- code_age*ALK$CAA[as.numeric(input$fAge):length(ALK$CAA)]#
    }else{#
      code_age <- seq(0,length(ALK$CAA)-1)#
      xN <- code_age*ALK$CAA[as.numeric(input$fAge)+1:length(ALK$CAA)]#
    }#
    T <- sum(xN)#
    Shat <- T/(sum(ALK$CAA)+(T-1))#
    Svar <- Shat*(Shat-((T-1)/(sum(ALK$CAA)+T-2)))#
    Ssd <- sqrt(Svar)#
    Sl95 <- Shat - qnorm(1-alpha/2)*Ssd#
    Su95 <- Shat + qnorm(1-alpha/2)*Ssd#
    d$"S (Robson-Chapman)" <- c(Shat,Sl95,Su95)#
    ### Jackson#
    Sjac <- sum(ALK$CAA[2:length(ALK$CAA)])/sum(ALK$CAA[1:(length(ALK$CAA)-1)])#
    d$"S (Jackson)" <- c(round(Sjac,2),"","")#
    #mean TL @ age unbiased#
    omerge <- ALK$mergeD[order(as.numeric(ALK$mergeD$cmgrp)),]                    #
    omerge$cmgrp <- as.numeric(omerge$cmgrp) #
    omerge$N <- as.numeric(omerge$N)#
    ## define all the variables#
    omerge$fx <- (omerge$cmgrp+0.5)*omerge$N   #
    omerge$fx2 <- (omerge$cmgrp+0.5)*(omerge$cmgrp+0.5)*omerge$N                       # f*(x^2)#
    omsumfx <- tapply(omerge$fx,list(omerge$age),sum) #
    omsumfx2 <- tapply(omerge$fx2,list(omerge$age),sum) # sums fx^2 by age#
    omsumf <- tapply(omerge$N,list(omerge$age),sum)  # sums N by age#
    ommeanTL <- omsumfx/omsumf   ## mean TL @ age unbiased #
    omvar <- (omsumf*omsumfx2 - omsumfx^2)/(omsumf*(omsumf-1))#
    omstd <- sqrt(omvar)#
    u95 <- ommeanTL+qnorm(1-(alpha/2))*omstd  # upper 95% CI#
    l95 <- ommeanTL-qnorm(1-(alpha/2))*omstd  #
    omresults <- data.frame(Age = seq(min(ALK$mergeD$age, na.rm=T), max(ALK$mergeD$age, na.rm=T)),#
                            CAA = ALK$CAA,#
                             meanTL = ommeanTL,#
                             lTL = l95,#
                             uTL = u95)#
    colnames(omresults) <- c("Age", "CAA", "\\overline{TL}_{age}", #
                             paste0("TL_{age}\\ lower\\ ", (1-alpha)*100,"\\%"),#
                             paste0("TL_{age}\\ upper\\ ", (1-alpha)*100,"\\%"))#
    list(h4("Estimates of Total Mortality"),#
      withMathJax(HTML(paste0("$$",#
                                print(xtable::xtable(d,#
                                                     align= "llrrrrr",#
                                                     digits = c(0,0,2,2,2,2,2)),#
                                      floating=FALSE, tabular.environment="array",#
                                      comment=FALSE, print.results=FALSE,#
                                      sanitize.text.function = function(x) x,#
                                      include.rownames = FALSE),"$$"#
                                ))),#
      h4("Unbiased Total Length at Age"),#
      withMathJax(HTML(paste0("$$",#
                              print(xtable::xtable(omresults,#
                                                   align= "llrrrr",#
                                                   digits = c(0,0,1,1,1,1)),#
                                    floating=FALSE, tabular.environment="array",#
                                    comment=FALSE, print.results=FALSE,#
                                    sanitize.text.function = function(x) x,#
                                    sanitize.colnames.function = function(x) x,#
                                    include.rownames = FALSE),"$$"#
      ))))#
  }#
  })#
  output$Millar_plot <- renderPlot({#
    CAA <- data.frame(Age = as.numeric(names(ALK$CAA)),#
                      Freq = ALK$CAA)#
    peak.age <- CAA$Age[which(CAA$Freq==max(CAA$Freq))]#
    # use ages greater that the peak to estimate total mortaltiy#
    ii <- which(CAA$Age >= peak.age)#
    CAA <- CAA[ii,]#
    #extend ages beyond the oldes observed age as recomended in Millar 2015#
    max.age <- max(CAA$Age)#
    extdDat <- rbind(CAA, cbind(Age=(max.age+1):(2*max.age),Freq=rep(0,max.age)))#
    extdDat$Freq <- floor(extdDat$Freq)#
    res.glmer.pois <- glmer(Freq ~ Age+(1|Age), family=poisson, data=extdDat)#
    re <- ranef(res.glmer.pois)$Age[,1]#
    par(mfrow=c(2,1), mar=c(4.3,4,1,1))#
    plot(extdDat$Age, extdDat$Freq, pch=16, cex=1.3, xlab ='Age', #
         ylab='Frequency', cex.axis=1.2, cex.lab=1.2, las=1)#
    plot(extdDat$Age, re, pch=16, cex=1.3, ylab='Random Effect', xlab='Age',#
         cex.axis=1.2, cex.lab=1.2, las=1)#
    abline(h=0, lty=3)#
  })#
  output$Millar_tab <- renderUI({#
    CAA <- data.frame(Age = as.numeric(names(ALK$CAA)),#
                      Freq = ALK$CAA)#
    peak.age <- CAA$Age[which(CAA$Freq==max(CAA$Freq))]#
    # use ages greater that the peak to estimate total mortaltiy#
    ii <- which(CAA$Age >= peak.age)#
    CAA <- CAA[ii,]#
    #extend ages beyond the oldes observed age as recomended in Millar 2015#
    max.age <- max(CAA$Age)#
    extdDat <- rbind(CAA, cbind(Age=(max.age+1):(2*max.age),Freq=rep(0,max.age)))#
    extdDat$Freq <- floor(extdDat$Freq)#
    # run the Poisson log-linear model with a random intercept for each Age#
    res.glmer.pois <- glmer(Freq ~ Age+(1|Age), family=poisson, data=extdDat)#
    conf95 <- confint(res.glmer.pois,#
                      level = 1-as.numeric(input$alpha)) #get 95% confidence intervals#
    summary(res.glmer.pois)#
#
    Z <- abs(fixef(res.glmer.pois)[2]) # extract MLE estimate of Z#
    se.Z <- summary(res.glmer.pois)$coefficients[2,2] # extract appriximation of standard error of Z#
    lower95 <- rev(abs(conf95[3,]))[1] #extract lower 95% CI#
    upper95 <- rev(abs(conf95[3,]))[2] #extract upper 95% CI#
#
    A <- 1-exp(-Z)#
    Al95 <- 1-exp(-lower95)#
    Au95 <- 1-exp(-upper95)#
#
    S <- 1-A#
    Sl95 <- 1-Al95#
    Su95 <- 1-Au95#
    d <- data.frame(names = c("\\hat{\\theta}",#
                              paste0("\\theta\\ lower\\ ", #
                                     (1-as.numeric(input$alpha))*100,"\\%"),#
                              paste0("\\theta\\  upper\\ ", #
                                     (1-as.numeric(input$alpha))*100,"\\%")),#
                    Z = c(Z, lower95, upper95),#
                    A = c(A, Al95, Au95),#
                    S = c(S, Sl95, Su95))#
    colnames(d)[1] <- ""#
    list(h4("Estimates of Total Mortality using Millar (2015)"),#
         withMathJax(HTML(paste0("$$",#
                                 print(xtable::xtable(d,#
                                                      align= "llrrr",#
                                                      digits = c(0,0,2,2,2)),#
                                       floating=FALSE, tabular.environment="array",#
                                       comment=FALSE, print.results=FALSE,#
                                       sanitize.text.function = function(x) x,#
                                       include.rownames = FALSE),"$$"#
         ))))#
  })#
#
}#
#
# Run the application #
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card(actionButton('btn','SIMULATE')),#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot')#
)#
#
server <- function(input,output,session){#
    sim1 <- reactive({#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        if(input$btn==0) return()#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card(actionButton('btn','SIMULATE')),#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot')#
)#
#
server <- function(input,output,session){#
    sim1 <- eventReactive(input$btn,{#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        if(input$btn==0) return()#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
}#
#
shinyApp(ui = ui, server = server)
?page_sidebar
ui <- page_fluid(#
    actionButton('goButton')#
    verbatimTextOutput('io')#
)#
server <- function(input, output, session){#
    renderPrint({input$goButton})#
}
ui <- page_fluid(#
    actionButton('goButton'),#
    verbatimTextOutput('io')#
)#
server <- function(input, output, session){#
    renderPrint({input$goButton})#
}
ui <- page_fluid(#
    actionButton('goButton'),#
    verbatimTextOutput('io')#
)#
server <- function(input, output, session){#
    output$io <- renderPrint({input$goButton})#
}
ui <- page_fluid(#
    actionButton('goButton','GO'),#
    verbatimTextOutput('io')#
)#
server <- function(input, output, session){#
    output$io <- renderPrint({input$goButton})#
}
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
    actionButton('goButton','GO'),#
    verbatimTextOutput('io')#
)#
server <- function(input, output, session){#
    output$io <- renderPrint({input$goButton})#
}#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card(actionButton('btn','SIMULATE')),#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot')#
)#
#
server <- function(input,output,session){#
    sim1 <- eventReactive(input$btn,{#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        if(input$btn==0) return()#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
#
ui <- page_fluid(#
    actionButton('goButton','GO'),#
    verbatimTextOutput('io')#
)#
server <- function(input, output, session){#
    output$io <- renderPrint({input$goButton})#
}#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card(actionButton('btn','SIMULATE')),#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot')#
)#
#
server <- function(input,output,session){#
    sim1 <- eventReactive(input$btn,{#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        if(input$btn==0) return()#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card(actionButton('btn','SIMULATE')),#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot')#
)#
#
server <- function(input,output,session){#
    sim1 <- eventReactive(input$btn,{#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        # if(input$btn==0) return()#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
     card(#
          card_header(#
          tooltip(#
            span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
            "This is the iris dataset",#
            placement = "right"#
          )#
          ),#
          plotlyOutput('plot1')#
     ),#
     card('Card 2',#
          layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
          ),#
     col_widths=c(6,6)#
     ),#
  layout_column_wrap(#
     card('Card 3',#
          tooltip(#
               plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
               'This is a plot of the iris dataset',#
               placement = 'right')#
          ),#
     card('Card 4',#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
     output$plot1 <- renderPlotly({#
          g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
          p <-  g + geom_point()#
          ggplotly(p)#
     })#
     output$plot2 <- renderPlotly({#
          g <- ggplot(iris, aes(Species))  #
          p <-  g + geom_bar()#
#
          ggplotly(p)#
     })#
     output$plot3 <- renderPlot({#
          palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
          plot(iris[,1],iris[,2],pch=16,#
               col = iris$Species)#
     })#
     output$plot3_table <- renderTable({#
     req(input$plot3_hover)#
     nearPoints(df = iris, #
                xvar = 'Sepal.Length',#
                yvar = 'Sepal.Width',#
                coordinfo = input$plot3_hover)#
     })#
     observeEvent(input$btn,{#
          showModal( #
           modalDialog( #
             title = "Somewhat important message", #
             easy_close = TRUE, #
             "This is your important message." #
           ) #
         ) #
     })#
}#
#
shinyApp(ui = ui, server = server)
##
# This is a Shiny web application. You can run the application by clicking#
# the 'Run App' button above.#
##
# Find out more about building applications with Shiny here:#
##
#    http://shiny.rstudio.com/#
##
#
library(shiny)#
library(shinyWidgets)#
#
# upfront -----------------------------------------------------------------#
    s.min <- 10#
    s.max <- 1000#
    S.pred <- seq(s.min, s.max, by=1)#
    sim.S <- function(){#
        S <- floor(runif(30, s.min, s.max))#
        return(S)#
    }#
    sim.Ricker <- function(S, a, b, sigma){#
        Rhat <- a*S*exp(-b*S)#
        R <- floor(rlnorm(30, meanlog=log(Rhat), sdlog=sigma))#
        return(data.frame(R=R, S=S))#
    }#
    sim.BH <- function(S,a, b, sigma){#
        Rhat <- a*S/(1+b*S)#
        R <- floor(rlnorm(30, meanlog=log(Rhat), sdlog=sigma))#
        return(data.frame(R=R, S=S))#
    }#
    fun.ricker <- function(theta, S, R){#
        a <- exp(theta[1])#
        b <- exp(theta[2])#
        sd <- exp(theta[3])#
        predR <- a*S*exp(-b*S)#
        #notice we use the log mean here#
        nll <- -sum(dlnorm(R, mean=log(predR), sd=sd, log=T))#
        return(nll)#
    }#
    fit.Ricker <- function(S, R){#
        logrps <- log(R/S)#
        fit_mult_lin <- lm(logrps~S)#
        summary(fit_mult_lin)#
        coef_lin <- coef(fit_mult_lin)#
        apar <- exp(coef_lin[1])#
        bpar <- -coef_lin[2]#
        theta = c(log(apar), log(bpar), log(0.5))#
        #procedure section#
        fit = optim(theta, fun.ricker, S=S, R=R, method='BFGS', hessian=T)#
        fit1 = optim(fit$par, fun.ricker, S=S, R=R, method='Nelder-Mead', hessian=T)#
        return(fit1$par)#
    }#
    pred.Ricker <- function(fit.par, S.pred){#
        par <- exp(fit.par)#
        pred <- par[1]*S.pred*exp(-par[2]*S.pred)#
        return(pred)#
    }#
    fun.bh <- function(theta, S, R){#
        a <- exp(theta[1])#
        b <- exp(theta[2])#
        sd <- exp(theta[3])#
        predR <- a*S/(1+b*S)#
        #notice we use the log mean here#
        nll <- -sum(dlnorm(R, mean=log(predR), sd=sd, log=T))#
        return(nll)#
    }#
    fit.BH <- function(S, R){#
        theta = c(log(30), log(0.001), log(0.5))#
        #procedure section#
        fit = optim(theta, fun.bh, S=S, R=R, method='BFGS', hessian=T)#
        fit1 = optim(fit$par, fun.bh, S=S, R=R, method='Nelder-Mead', hessian=T)#
        return(fit1$par)#
    }#
    pred.BH <- function(fit.par, S.pred){#
        par <- exp(fit.par)#
        pred <- par[1]*S.pred/(1+par[2]*S.pred)#
        return(pred)#
    }#
#
# shiny -------------------------------------------------------------------#
#
# Define UI for application that draws a histogram#
ui <- fluidPage(#
    tags$head(#
        tags$style(HTML("@import url('//fonts.googleapis.com/css?family=Lobster|Cabin:400,700');#
                    h2 {font-family: 'Lobster', cursive;#
                    font-weight: 500; line-height: 1.1;}"))),#
    # Application title#
    titlePanel("Exploring Stock-Recruit Relationships"),#
    br(),#
    withMathJax(),#
    fluidRow(#
          column(width = 12, align='center',#
                 actionBttn('simulate',#
                            label='Simulate',#
                            style='material-flat',#
                            color='success',#
                            size='sm'))),#
    fluidRow(#
            column(width=4, align='center',#
                 h5("Ricker \\(\\theta\\)"),#
                 sliderInput('ricker_a',#
                             label = em('a'),#
                             min = 5, max=40, step=5, value=20),#
                 sliderInput('ricker_b',#
                             label = em('b'),#
                             min = 0.0002, max=0.003, step=0.0002, value=0.0024),#
                 sliderInput('ricker_sigma',#
                             label="\\(\\sigma\\)",#
                             min = 0.05, max=1, step=0.05, value=0.2)),#
            column(width=5, align='center',#
                   br(),#
                   br(),#
                   plotOutput("rick_plot", height="300px", #
                              hover=hoverOpts(id='rick_hover',#
                                              delay=100))),#
            column(width=3, align='center',#
                   br(),#
                   h6("Observed:"),#
                   verbatimTextOutput('rick_obsS_text'),#
                   verbatimTextOutput('rick_obsR_text'),#
                   br(),#
                   h6("Predicted:"),#
                   verbatimTextOutput('rick_predS_text'),#
                   verbatimTextOutput('rick_predR_text'))#
          ),#
    fluidRow(#
        column(width=4, align='center',#
                h5("Beverton-Holt \\(\\theta\\)"),#
                sliderInput('bh_a',#
                            label = em('a'),#
                            min = 5, max=40, step=5, value=20),#
                sliderInput('bh_b',#
                            label = em('b'),#
                            min = 0.001, max=0.03, step=0.001, value=0.02),#
                sliderInput('bh_sigma',#
                            label="\\(\\sigma\\)",#
                            min = 0.05, max=1, step=0.05, value=0.2)),#
        column(width=5, align='center',#
               br(),#
               br(),#
               plotOutput("bh_plot", height="300px", #
                          hover=hoverOpts(id='bh_hover',#
                                          delay=100))),#
        column(width=3, align='center',#
               br(),#
               h6("Observed:"),#
               verbatimTextOutput('bh_obsS_text'),#
               verbatimTextOutput('bh_obsR_text'),#
               br(),#
               h6("Predicted:"),#
               verbatimTextOutput('bh_predS_text'),#
               verbatimTextOutput('bh_predR_text'))#
    ),#
    fluidRow(br(),br())#
)#
#
# Define server logic required to draw a histogram#
server <- function(input, output){#
    rickerListen <- reactive({#
        list(input$simulate,input$ricker_a, input$ricker_b, input$ricker_sigma)#
    })#
    bhListen <- reactive({#
        list(input$simulate,input$bh_a, input$bh_b, input$bh_sigma)#
    })#
    S <- reactive({#
        input$simulate#
        sim.S()#
    })#
    rick.n <- reactiveValues()#
    observeEvent(rickerListen(),{#
        rick.n$data <- sim.Ricker(S(), input$ricker_a, input$ricker_b, input$ricker_sigma)#
        rick.n$fit <- fit.Ricker(rick.n$data$S, rick.n$data$R)#
        rick.n$pred <- floor(pred.Ricker(rick.n$fit, S.pred))#
        rick.n$bh.fit <- fit.BH(rick.n$data$S, rick.n$data$R)#
        rick.n$bh.pred <- floor(pred.BH(rick.n$bh.fit, S.pred))#
        rick.n$pt <- NULL#
        rick.n$pt2 <- NULL#
    })#
    bh.n <- reactiveValues()#
    observeEvent(bhListen(),{#
        bh.n$data <- sim.BH(S(), input$bh_a, input$bh_b, input$bh_sigma)#
        bh.n$fit <- fit.BH(bh.n$data$S, bh.n$data$R)#
        bh.n$pred <- floor(pred.BH(bh.n$fit, S.pred))#
        bh.n$rick.fit <- fit.Ricker(bh.n$data$S, bh.n$data$R)#
        bh.n$rick.pred <- floor(pred.Ricker(bh.n$rick.fit, S.pred))#
        bh.n$pt <- NULL#
        bh.n$pt2 <- NULL#
    })#
    observeEvent(input$rick_hover,{#
        tmp <- data.frame(S=rick.n$data$S, R=rick.n$data$R/1000)#
        tmp2 <- data.frame(S=S.pred, R=rick.n$pred/1000)#
        rick.n$pt <- nearPoints(tmp, input$rick_hover, threshold = 20, maxpoints = 1,#
                         addDist = FALSE, xvar="S", yvar='R', allRows=TRUE)#
        rick.n$pt2 <- nearPoints(tmp2, input$rick_hover, threshold = 20, maxpoints = 1,#
                                addDist = FALSE, xvar="S", yvar='R', allRows=TRUE)#
    })#
    observeEvent(input$bh_hover,{#
        tmp <- data.frame(S=bh.n$data$S, R=bh.n$data$R/1000)#
        tmp2 <- data.frame(S=S.pred, R=bh.n$pred/1000)#
        bh.n$pt <- nearPoints(tmp, input$bh_hover, threshold = 20, maxpoints = 1,#
                                addDist = FALSE, xvar="S", yvar='R', allRows=TRUE)#
        bh.n$pt2 <- nearPoints(tmp2, input$bh_hover, threshold = 20, maxpoints = 1,#
                              addDist = FALSE, xvar="S", yvar='R', allRows=TRUE)#
    })#
    output$rick_plot <- renderPlot({#
        par(mar=c(4,4,1,1),las=1)#
        plot(rick.n$data$S, rick.n$data$R/1000,#
             xlab="Stock", ylab="Recruits (1000's)",#
             pch=16, main='Ricker SRR', col='firebrick3')#
        lines(S.pred, rick.n$pred/1000, col='firebrick4', lwd=3)#
        lines(S.pred, rick.n$bh.pred/1000, col='dodgerblue4', lwd=2, lty=3)#
        points(rick.n$pt[rick.n$pt$selected_,1], rick.n$pt[rick.n$pt$selected_,2],#
               pch=4, col='firebrick3', cex=1.5, lwd=2)#
        points(rick.n$pt2[rick.n$pt2$selected_,1], rick.n$pt2[rick.n$pt2$selected_,2],#
               pch=4, col='firebrick4', cex=1.5, lwd=2)#
    })#
    output$bh_plot <- renderPlot({#
        par(mar=c(4,4,1,1),las=1)#
        plot(bh.n$data$S, bh.n$data$R/1000,#
             xlab="Stock", ylab="Recruits (1000's)",#
             pch=16, main='Beverton-Holt SRR', col='dodgerblue3')#
        lines(S.pred, bh.n$pred/1000, col='dodgerblue4', lwd=3)#
        lines(S.pred, bh.n$rick.pred/1000, col='firebrick4', lwd=2, lty=3)#
        points(bh.n$pt[bh.n$pt$selected_,1], bh.n$pt[bh.n$pt$selected_,2],#
               pch=4, col='dodgerblue3', cex=1.5, lwd=2)#
        points(bh.n$pt2[bh.n$pt2$selected_,1], bh.n$pt2[bh.n$pt2$selected_,2],#
               pch=4, col='dodgerblue4', cex=1.5, lwd=2)#
    })#
    output$rick_obsS_text <- renderText({#
        if(any(rick.n$pt$selected_)){#
            txt <- paste0('Stock = ', rick.n$pt[rick.n$pt$selected_,1])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$rick_obsR_text <- renderText({#
        if(any(rick.n$pt$selected_)){#
            txt <- paste0('Recruits = ', rick.n$pt[rick.n$pt$selected_,2])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$rick_predS_text <- renderText({#
        if(any(rick.n$pt2$selected_)){#
            txt <- paste0('Stock = ', rick.n$pt2[rick.n$pt2$selected_,1])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$rick_predR_text <- renderText({#
        if(any(rick.n$pt2$selected_)){#
            txt <- paste0('Recruits = ', rick.n$pt2[rick.n$pt2$selected_,2])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$bh_obsS_text <- renderText({#
        if(any(bh.n$pt$selected_)){#
            txt <- paste0('Stock = ', bh.n$pt[bh.n$pt$selected_,1])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$bh_obsR_text <- renderText({#
        if(any(bh.n$pt$selected_)){#
            txt <- paste0('Recruits = ', bh.n$pt[bh.n$pt$selected_,2])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$bh_predS_text <- renderText({#
        if(any(bh.n$pt2$selected_)){#
            txt <- paste0('Stock = ', bh.n$pt2[bh.n$pt2$selected_,1])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
    output$bh_predR_text <- renderText({#
        if(any(bh.n$pt2$selected_)){#
            txt <- paste0('Recruits = ', bh.n$pt2[bh.n$pt2$selected_,2])#
        }else{#
            txt <- " "#
        }#
        return(txt)#
    })#
}#
#
# Run the application #
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card(actionButton('btn','SIMULATE')),#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot'),#
    verbatimTextOutput('io')#
)#
#
server <- function(input,output,session){#
    sim1 <- reactive({#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        if(input$btn==0) return()#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
    output$io <- renderPrint({input$age})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card(actionButton('btn','SIMULATE')),#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot'),#
    verbatimTextOutput('io'),#
    verbatimTextOutput('io2')#
)#
#
server <- function(input,output,session){#
    sim1 <- reactive({#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        if(input$btn==0) return()#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
    output$io <- renderPrint({input$age})#
    output$io2 <- renderPrint({head(sim1())})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card(actionButton('btn','SIMULATE')),#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot'),#
    verbatimTextOutput('io'),#
    verbatimTextOutput('io2'),#
    fillable = FALSE#
)#
#
server <- function(input,output,session){#
    sim1 <- reactive({#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        if(input$btn==0) return()#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
    output$io <- renderPrint({input$age})#
    output$io2 <- renderPrint({head(sim1())})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(reactlog)#
#
reactlog_enable()#
#
vbgm_sim <- function(n, Linf = 120, k = 0.2, Lknot = 20, sig = 0.1, min.age = 0, max.age = 15){#
    #generate uniform draws of ages#
    ages <- runif(n, min.age, max.age)#
    #calculate mean growth#
    mu <- Linf - (Linf - Lknot)*exp(-k * ages)#
    #draw lognormal deviates#
    val <- rlnorm(n, log(mu), sig)#
    return(data.frame(age = ages, L = val))#
}#
#
ui <- page_sidebar(title='Conductor Example',#
    sidebar = sidebar(#
        card(actionButton('btn','SIMULATE')),#
        card('von Bertalanffy parameters',#
             sliderInput(inputId = 'Linf',#
                         label = 'Linf (avg. max)',#
                         min = 50, max = 150,#
                         value = 120, step = 10),#
             sliderInput(inputId = 'k',#
                         label = 'k (growth rate)',#
                         min = 0.05, max = 0.5,#
                         value = 0.2, step = 0.05),#
             sliderInput(inputId = 'Lknot',#
                         label = 'L0 (size at birth)',#
                         min = 0, max = 32,#
                         value = 20, step = 4)#
        ),#
        card(title = 'Selectivity parameters',#
             sliderInput(inputId = 'age',#
                         label = 'Ages to draw',#
                         min = 0, max = 20,#
                         value = c(0,15), step = 1),#
        ),#
        card(title = 'Simulation parameters',#
             sliderInput(inputId = 'samp',#
                         label = '# of Samples',#
                         min = 250, max = 2000,#
                         value = 500, step = 250),#
             sliderInput(inputId = 'sig',#
                         label = 'Variability',#
                         min = 0.05, max = 0.5,#
                         value = 0.1, step = 0.05)#
        ), width = 350, open = 'always'#
    ),#
    plotOutput('plot'),#
    verbatimTextOutput('io'),#
    verbatimTextOutput('io2'),#
    fillable = FALSE#
)#
#
server <- function(input,output,session){#
    sim1 <- eventReactive(input$btn,{#
        vbgm_sim(n = input$samp,#
                 Linf = input$Linf,#
                 k = input$k,#
                 Lknot = input$Lknot,#
                 sig = input$sig,#
                 min.age = input$age[1],#
                 max.age = input$age[2])#
    })#
    output$plot <- renderPlot({#
        if(input$btn==0) return()#
        plot(sim1()$age,#
             sim1()$L,#
             pch = 16,#
             xlab = 'Age',#
             ylab = 'Length',#
             ylim = c(0,max(sim1()$L)+5),#
             xlim = c(-0.1, max(sim1()$age)+0.1),#
             xaxs='i', yaxs='i', las = 1)#
        text(0, max(sim1()$L),#
             "von Bertalanffy growth simulation",#
             font = 4, cex = 1.5,#
             adj = c(0,1))#
    })#
    output$io <- renderPrint({input$age})#
    output$io2 <- renderPrint({head(sim1())})#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(plotly)#
library(ggplot2)#
#
ui <- page_fluid(#
  layout_columns(#
     card(#
          card_header(#
          tooltip(#
            span("Card 1 ", bsicons::bs_icon("question-circle-fill")),#
            "This is the iris dataset",#
            placement = "right"#
          )#
          ),#
          plotlyOutput('plot1')#
     ),#
     card('Card 2',#
          layout_columns(#
            card('2.1',#
                 actionButton("btn", "A button")#
                 ),#
            card('2.2',#
                 plotlyOutput('plot2')#
                 ),#
            col_widths = c(4,8)#
            )#
          ),#
     col_widths=c(6,6)#
     ),#
  layout_column_wrap(#
     card('Card 3',#
          tooltip(#
               plotOutput('plot3',#
                     hover = hoverOpts(id = 'plot3_hover')),#
               'This is a plot of the iris dataset',#
               placement = 'right')#
          ),#
     card('Card 4',#
          tableOutput('plot3_table')#
          )#
  )#
)#
#
server <- function(input,output,session){#
     output$plot1 <- renderPlotly({#
          g <- ggplot(iris, aes(x=Sepal.Length, y = Sepal.Width, col = Species))  #
          p <-  g + geom_point()#
          ggplotly(p)#
     })#
     output$plot2 <- renderPlotly({#
          g <- ggplot(iris, aes(Species))  #
          p <-  g + geom_bar()#
#
          ggplotly(p)#
     })#
     output$plot3 <- renderPlot({#
          palette(c('dodgerblue1','firebrick1','darkorchid1'))#
#
          plot(iris[,1],iris[,2],pch=16,#
               col = iris$Species)#
     })#
     output$plot3_table <- renderTable({#
          req(input$plot3_hover)#
          nearPoints(df = iris, #
                     xvar = 'Sepal.Length',#
                     yvar = 'Sepal.Width',#
                     coordinfo = input$plot3_hover)#
     })#
     observeEvent(input$btn,{#
          showModal( #
           modalDialog( #
             title = "Somewhat important message", #
             easy_close = TRUE, #
             "This is your important message." #
           ) #
         ) #
     })#
}#
#
shinyApp(ui = ui, server = server)
library(sf)
panther <- st_read('/Users/zach/Dropbox/Grad classes/2014 Spring Courses/WIS/panther_data-2/panthers.shp')
panther
table(panther$CatID)
?? prettyCheckboxGroup
library(sf)
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'
setwd(path)
tracks <- st_read("./tracks/panther.shp")
tracks <- st_read("./tracks/panthers.shp")
tracks <- st_transform(tracks,'4326')
?st_transform
tracks <- st_transform(tracks,'EPSG:4326')
tracks
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])
table(tracks$ID)
as.character(levels(tracks$ID))
library(shiny)#
library(bslib)#
library(leaflet)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'round',#
        justified = TRUE,#
        inline=FALSE,#
        checkIcon = list(#
            yes = icon("star", #
                       lib = "glyphicon"))#
    )#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'round',#
        justified = TRUE,#
        inline=FALSE,#
        checkIcon = list(#
            yes = icon("star", #
                       lib = "glyphicon"))#
    )#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'round',#
        justified = TRUE,#
        inline=FALSE,#
        icon = list(#
            yes = icon("star", #
                       lib = "glyphicon"))#
    )#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'round',#
        inline=FALSE,#
        icon = icon("star",lib = "glyphicon"))#
    )#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'round',#
        inline=FALSE,#
        icon = bsicons::bs_icon("bi-check-circle-fill"))#
    )#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'round',#
        inline=FALSE,#
        icon = bsicons::bs_icon("check-circle-fill"))#
    )#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'round',#
        inline=FALSE,#
        icon = bsicons::bs_icon("check-circle-fill"))#
    )#
)#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
bsicons::bs_icon("check-circle-fill")
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'round',#
        inline=FALSE,#
        icon = icon(bsicons::bs_icon("check-circle-fill")))#
    )#
)#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
?icon
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'round',#
        inline=FALSE,#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'square',#
        inline=FALSE,#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
?prettyCheckboxGroup
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
   )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = as.character(levels(tracks$ID)),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
h3('a')
fancy_names <- HTML(lapply(as.character(levels(tracks$ID)),h3))
as.character(levels(tracks$ID))
sapply(as.character(levels(tracks$ID))
sapply(as.character(levels(tracks$ID)),h3)
levels(tracks$ID)
list(levels(tracks$ID))
as.list(levels(tracks$ID))
lapply(as.list(levels(tracks$ID)),h3)
fancy_names <- HTML(lapply(as.list(levels(tracks$ID)),h3))
lapply(as.list(levels(tracks$ID)),#
                      function(X)HTML(h3(x)))
lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(h3(x)))
lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(as.character(h3(x))))
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(as.character(h3(x))))
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(as.character(h3(x))))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = levels(tracks$ID),#
        choiceValues = fancy_names,#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(as.character(h3(x))))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<div>",x,"</div>")))
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<div>",x,"</div>")))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<div>",x,"; style=font-family: 'Barrio', san-serif</div>")))
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<div>",x,"; style=font-family: 'Barrio', san-serif</div>")))
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<div>",x,"; style=font-family: 'Barrio', san-serif</div>")))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<div>",x,"</div>")))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }#
      div {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
?tag
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))
fancy_names
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif"))#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
list("font-family" = "'Barrio', san-serif")
shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif"))
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
customLabel <- tag("customLabel", list(class = "customLabel"))
str(customLabel)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&display=swap');#
      h1 {#
        font-family: 'Barrio', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&family=Rubik+Moonrocks&display=swap');#
      h1 {#
        font-family: 'Rubik Moonrocks', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = "Choose an Panther",#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
?strong
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#https://shiny.posit.co/r/articles/build/tag-glossary/#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&family=Rubik+Moonrocks&display=swap');#
      h1 {#
        font-family: 'Rubik Moonrocks', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = tag$em("Choose an Panther"),#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#https://shiny.posit.co/r/articles/build/tag-glossary/#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&family=Rubik+Moonrocks&display=swap');#
      h1 {#
        font-family: 'Rubik Moonrocks', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = HTML(tag$em("Choose an Panther")),#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#https://shiny.posit.co/r/articles/build/tag-glossary/#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&family=Rubik+Moonrocks&display=swap');#
      h1 {#
        font-family: 'Rubik Moonrocks', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = tags$em("Choose an Panther"),#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    )#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
}#
#
shinyApp(ui = ui, server = server)
def_bbox <- st_bbox(tracks)
def_bbox
?fitBounds
library(shiny)#
library(bslib)#
library(leaflet)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
#
def_bbox <- st_bbox(tracks)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#https://shiny.posit.co/r/articles/build/tag-glossary/#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&family=Rubik+Moonrocks&display=swap');#
      h1 {#
        font-family: 'Rubik Moonrocks', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = tags$em("Choose an Panther"), #make italic for BB#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    ),#
   leafletOutput("map_plot",height=500)#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
    output$map_plot <- renderLeaflet(#
        leaflet() %>%#
            addProviderTiles("Esri.WorldTerrain")%>%#
                fitBounds(lng1 = def_bbox[1],#
                          lng2 = def_bbox[2],#
                          lat1 = def_bbox[3],#
                          lat2 = def_bbox[4])#
    )#
}#
#
shinyApp(ui = ui, server = server)
?addProviderTiles
library(leaflet.extras)
?install.packages('leaflet.extras')
install.packages('leaflet.extras')
library(leaflet)
?addProviderTiles
library(shiny)#
library(shinyjs)#
library(leaflet)#
library(leaflet.extras)#
library(shinyWidgets)#
library(raster)#
library(rgeos)#
library(maptools)#
source('slice_poly.R')#
load('prep_data.Rdata', verbose=T)#
nearshore <- function(sl, buff=0.05, rotate, n.areas=3, scale=10){#
    buff.poly <- crop(buffer(sl, buff),extent(sl))#
    diff.poly <- gDifference(buff.poly, sl)#
    diff.elide <- elide(diff.poly, #
                        rotate=rotate,#
                        center = rowMeans(bbox(sl)))#
    fraction <- seq(1:(n.areas-1))/n.areas#
    parts = do.call('bind',chop(diff.elide, #
                                fraction = fraction, #
                                scale=scale))#
    sl.sect <- elide(parts, #
                     rotate=-1*rotate,#
                     center = rowMeans(bbox(sl)))#
    proj4string(sl.sect) <- proj4string(sl)#
    sl.sect <- SpatialPolygonsDataFrame(sl.sect, data=data.frame(ID = 1:n.areas))#
    return(sl.sect)#
}#
vul.len <- function(x, vul){#
    pmin(pmax(0, 1/(1+exp(-(x - vul[1])/(vul[1]*vul[3]))) - 1/(1+exp(-(x - vul[2])/(vul[2]*vul[4])))),1)#
}#
col2rgbA<-function(color,transparency)#
{#
    rgb(t(col2rgb(color))/255,alpha=transparency)#
}#
# Define UI for application that draws a histogram#
ui <- fluidPage(#
#
    tags$head(#
        tags$style(HTML("@import url('//fonts.googleapis.com/css?family=Lobster|Cabin:400,700');#
                    h2 {font-family: 'Lobster', cursive;#
                    font-weight: 500; line-height: 1.1;}"))),#
    titlePanel("Habitat-based Beverton-Holt Stock-Recruit Relationship "),#
    withMathJax(),#
    useShinyjs(),#
    tabsetPanel(#
        tabPanel("Map",#
                 fluidRow(#
                     column(8,#
                        leafletOutput("map_plot",height=500),#
                        tableOutput('misc'),#
                        align='center'),#
                     column(4,#
                            br(),#
                            radioGroupButtons(#
                                inputId = "map_choice",#
                                label = "Choose an Area",#
                                choiceNames = c("CEDAR KEY", #
                                            "TAMPA BAY",#
                                            "10K ISLANDS"),#
                                choiceValues = c("1","2","3"),#
                                selected = "",#
                                justified = TRUE,#
                                direction='vertical',#
                                checkIcon = list(#
                                    yes = icon("star", #
                                               lib = "glyphicon"))#
                            ),#
                            br(),#
                            sliderInput('n.area',#
                                        label = "Number of Zones",#
                                        min = 1,#
                                        max = 10,#
                                        value = 2),#
                            br(),#
                             actionButton(#
                                 inputId = "slice",#
                                 label = "SLICE", #
                                 style = "color: #ffffff;#
                                 background-color: #66004d;#
                                 border-color: #990073;#
                                 border-radius: 10px;#
                                 border-width: 2px;#
                                 font-weight: bold"),#
                            br(),#
                            br(),#
                            uiOutput('randombttn'),#
                            br(),#
                            uiOutput('locUIslide'),#
                            uiOutput('locUIbttn'),#
                            align='center')#
                     )#
                 , value='map_tab'),#
        tabPanel("\\(\\theta\\)",#
                 br(),#
                 fluidRow(#
                     column(width=4, align='center',#
                            fixedRow(#
                                column(width=3,h5("\\(A_{max}\\)")),#
                                column(width=9,#
                                       sliderInput('a_max', label=NULL,#
                                                   min=5, max=30, step=5, value=15))),#
                            fixedRow(#
                                column(width=3,h5("\\(L_{\\infty}\\)")),#
                                column(width=9,#
                                       sliderInput('vbLinf', label=NULL,#
                                                   min=50, max=150, step=10, value=100))),#
                            fixedRow(#
                                column(width=3,h5("\\(k\\)")),#
                                column(width=9,#
                                       sliderInput('vbk', label=NULL,#
                                                   min=0.05, max=0.8, step=0.05, value=0.35))),#
                            fixedRow(#
                                column(width=3,h5("\\(t_{0}\\)")),#
                                column(width=9,#
                                       sliderInput('vbtknot', label=NULL,#
                                                   min=-6, max=0, step=0.5, value=0))),#
                            fixedRow(#
                                column(width=3,h5("\\(a\\)")),#
                                column(width=9,#
                                       sliderInput('lwa', label=NULL,#
                                                   min=1, max=9, step=0.5, value=3,#
                                                   post="e-5"))),#
                            fixedRow(#
                                column(width=3,h5("\\(b\\)")),#
                                column(width=9,#
                                       sliderInput('lwb', label=NULL,#
                                                   min=2.5, max=3.5, step=0.1, value=3,#
                                                   round=2))),#
                            fixedRow(#
                                column(width=3,h5("\\(A_{mat}\\)")),#
                                column(width=9,#
                                       uiOutput('amat_slider'))),#
                            fixedRow(#
                                column(width=3,h5("\\(M\\)")),#
                                column(width=9,#
                                       uiOutput('m_slider'))),#
                            fixedRow(#
                                column(width=3,h5("\\(U\\)")),#
                                column(width=9,#
                                       sliderInput('killU', label=NULL,#
                                                   min=0, max=1, step=0.1, value=0))),#
                            fixedRow(#
                                column(width=3,h5("\\(D\\)")),#
                                column(width=9,#
                                       sliderInput('killD', label=NULL,#
                                                   min=0, max=1, step=0.1, value=0))),#
                            fixedRow(#
                                column(width=3,h5("\\(CR\\)")),#
                                column(width=9,#
                                       sliderInput('CR', label=NULL,#
                                                   min=1, max=100, step=2, value=8))),#
                            fixedRow(#
                                column(width=3,h5("\\(R_{0}\\)")),#
                                column(width=9,#
                                       sliderInput('Ro', label=NULL,#
                                                   min=250, max=2000, step=250, value=1000))),#
                            fixedRow(#
                                column(width=3,h5("\\(\\sigma_{obs}\\)")),#
                                column(width=9,#
                                       sliderInput('sigma_obs', label=NULL,#
                                                   min=0.001, max=1.5, step=0.1, value=0.6))),#
                            fixedRow(#
                                column(width=3,h5("\\(\\sigma_{obs}\\)")),#
                                column(width=9,#
                                       sliderInput('sigma_obs', label=NULL,#
                                                   min=0.001, max=1.5, step=0.05, value=0.01))),#
                            fixedRow(#
                                column(width=3,h5("\\(c^*\\)")),#
                                column(width=9,#
                                       sliderInput('cstar', label=NULL,#
                                                   min=0, max=1, step=0.1, value=1)))#
                     ),#
                     column(width=8, align='center',#
                            fixedRow(#
                                column(1, align='left',#
                                       div(HTML("<strong>Capture<br/>Selectivity</strong>"))),#
                                column(10, align='center',#
                                       uiOutput('cap_slider'))),#
                            fixedRow(#
                                column(1, align='left',#
                                       div(HTML("<strong>Capture<br/>Sharpness</strong>"))),#
                                column(10, align='center',#
                                       noUiSliderInput(#
                                           inputId = "cap_sl", label = NULL,#
                                           min = 0.01, max = 0.3, value = c(0.1,0.1),#
                                           step = 0.01))),#
                            fixedRow(#
                                column(1, align='left',#
                                       div(HTML("<strong>Slot<br/>Limits</strong>"))),#
                                column(10, align='center',#
                                       uiOutput('slot_slider'))),#
                            fixedRow(#
                                column(1, align='left',#
                                       div(HTML("<strong>Slot<br/>Sharpness</strong>"))),#
                                column(10, align='center',#
                                       noUiSliderInput(#
                                           inputId = "slot_sl", label = NULL,#
                                           min = 0.01, max = 0.3, value = c(0.1,0.1),#
                                           step = 0.01))),#
                            plotOutput(outputId = 'vul_plot', width="80%", height="200px"),#
                            plotOutput(outputId = 'life_plot', width="80%", height="500px")#
                            # verbatimTextOutput('Ro_vec')#
                            )#
                 ) #fluidRow#
        , value='parm'),#
        tabPanel("Simulate",#
                 br(),#
                 fluidRow(#
                     column(width=4, align='center',#
                            fixedRow(#
                                column(width=3,h5("\\(years\\)")),#
                                column(width=9,#
                                       sliderInput('n_years', label=NULL,#
                                                   min=5, max=100, step=5, value=50))),#
                            fixedRow(#
                                column(width=3,h5("Dispersal")),#
                                column(width=9,switchInput(inputId = "disp_flag", #
                                                           onLabel = "Yes",#
                                                           offLabel="No",#
                                                           value = TRUE),align='center')),#
                            fixedRow(#
                                column(width=3,h5("\\(\\sigma_{dispersal}\\)")),#
                                column(width=9,#
                                       sliderInput('sigma_disp', label=NULL,#
                                                   min=0.001, max=1.5, step=0.1, value=1))),#
                            fixedRow(#
                                column(width=3,h5("Population\nOpeness")),#
                                column(width=9,switchInput(inputId = "pop_oc", #
                                            onLabel = "Open",#
                                            offLabel="Closed",#
                                            value = FALSE),align='center')),#
                     ),#
                     column(8, align='center',#
                            # verbatimTextOutput('vis_sim'),#
                            plotOutput('N_plot', height='400px')#
                            )#
                 ) #fluidRow#
                 , value='simulate')#
        ),#
    tags$script("$(\"input:radio[name='map_choice'][value='1']\").parent().css('background-color', '#008080').css('color', '#FFFFFF').css('font-weight','bold');"),#
    tags$script("$(\"input:radio[name='map_choice'][value='2']\").parent().css('background-color', '#004D99').css('color', '#FFFFFF').css('font-weight','bold');"),#
    tags$script("$(\"input:radio[name='map_choice'][value='3']\").parent().css('background-color', '#FFAD33').css('color', '#FFFFFF').css('font-weight','bold');"),#
)#
# Define server logic required to draw a histogram#
server <- function(input, output) {#
    # toListen <- reactive({#
    #     if(is.null(input$enter_val)){#
    #         list(input$slice)#
    #     }else{#
    #         list(input$slice, input$enter_val)#
    #     }#
    # })#
    zones <- reactiveValues()#
    bbox.m <- reactive({#
        if(length(input$map_choice)==0){#
            c(-84.5,-80.5,24.9,30.5)#
        }else{#
            switch(input$map_choice,#
                   "1" = as.vector(ext.ck),#
                   "2" = as.vector(ext.tb),#
                   "3" = as.vector(ext.10k))#
        }#
    })#
#
    output$map_plot <- renderLeaflet(#
        leaflet() %>%#
            addProviderTiles("Esri.WorldTerrain")%>%#
                fitBounds(lng1 = bbox.m()[1],#
                          lng2 = bbox.m()[2],#
                          lat1 = bbox.m()[3],#
                          lat2 = bbox.m()[4])#
    )#
    observeEvent(input$map_choice,{#
        leafletProxy("map_plot") %>%#
            clearShapes() %>%#
            flyToBounds(lng1 = bbox.m()[1],#
                      lng2 = bbox.m()[2],#
                      lat1 = bbox.m()[3],#
                      lat2 = bbox.m()[4])#
    })#
    observeEvent(input$slice,{#
        if(length(input$map_choice)==0) return()#
        buff <- switch(input$map_choice,#
                       "1" = 0.05,#
                       "2" = 0.1,#
                       "3" = 0.05)#
        rotate <- switch(input$map_choice,#
                       "1" = -30,#
                       "2" = 37,#
                       "3" = -30)#
        sl <- switch(input$map_choice,#
                       "1" = sl.ck,#
                       "2" = sl.tb,#
                       "3" = sl.10k)#
        scale <- switch(input$map_choice,#
                        "1" = min(apply(bbox(sl.ck),1,diff))/10,#
                        "2" = min(apply(bbox(sl.tb),1,diff))/10,#
                        "3" = min(apply(bbox(sl.10k),1,diff))/10)#
        zones$sect <- nearshore(sl = sl, #
                          buff = buff,#
                          rotate = rotate,#
                          n.areas = input$n.area,#
                          scale = scale)#
        zones$val <- as.numeric(rep(1, input$n.area)) #set all to 1#
        popup.loc <- switch(input$map_choice,#
                        "1" = bbox(sl.ck)[,1] + apply(bbox(sl.ck),1,diff)*0.75,#
                        "2" = bbox(sl.tb)[,1] + apply(bbox(sl.tb),1,diff)*c(0.9,0.05),#
                        "3" = bbox(sl.10k)[,1] + apply(bbox(sl.10k),1,diff)*0.75)#
        # fillColor <- switch(input$map_choice,#
        #                     "1" = "#008080",#
        #                     "2" = '#004D99',#
        #                     "3" = '#FFAD33')#
        pal <- colorNumeric(rcartocolor::carto_pal(7,'SunsetDark'),#
                            domain=c(-0.1,1.1))#
        leafletProxy("map_plot", data=zones$sect) %>%#
            clearShapes() %>%#
            addPolygons(color = '#FFFFFF',#
                        weight = 2,#
                        opacity = 1,#
                        fillColor = ~pal(zones$val),#
                        fillOpacity = 1,#
                        highlightOptions = highlightOptions(color = ~pal(zones$val), #
                                                            weight = 8,#
                                                            opacity = 1,#
                                                            bringToFront = TRUE))%>%#
            addPopups(lng=popup.loc[1], lat=popup.loc[2], #
                      popup = "Click a Zone to Edit")#
    })#
    observeEvent(input$map_plot_shape_click,{#
        if(length(input$map_choice==0) & !input$slice) return()#
        if(is.null(input$map_plot_shape_click)){#
            return(NULL)#
        }else{#
            pt <- SpatialPoints(matrix(c(as.numeric(input$map_plot_shape_click$lng),#
                                         as.numeric(input$map_plot_shape_click$lat)),#
                                       ncol=2), proj4string=CRS(proj4string(sl.ck)))#
            ov <- over(pt, zones$sect)#
            if(!is.na(ov)){#
                zones$ov <- ov#
            }else{#
                return(NULL)#
            }#
        }#
    })#
    output$randombttn <- renderUI({#
        if(!input$slice) return()#
        actionButton(#
            inputId = "random_zone",#
            label = "RANDOMIZE", #
            style = "color: #ffffff;#
                     background-color: #e65c00;#
                     border-color: #ff751a;#
                     border-radius: 10px;#
                     border-width: 2px;#
                     font-weight: bold")#
    })#
    output$locUIslide <- renderUI({#
        if(length(input$map_choice==0) & !input$slice) return()#
        if(is.null(input$map_plot_shape_click)){#
            return(NULL)#
        }else{#
        sliderInput(inputId = 'hab_val',#
                    label = paste0("Editing Zone ", zones$ov),#
                    min = 0,#
                    max = 1,#
                    value = 1, #
                    step = 0.1)#
        }#
    })#
    output$locUIbttn <- renderUI({#
        if(length(input$map_choice==0) & !input$slice) return()#
        if(is.null(input$map_plot_shape_click)){#
            return(NULL)#
        }else{#
        actionButton(#
            inputId = "enter_val",#
            label = "SUBMIT", #
            style = "color: #000000;#
                     background-color: #ccffe6;#
                     border-color: #00e6e6;#
                     border-radius: 10px;#
                     border-width: 2px;#
                     font-weight: bold")#
        }#
    })#
    observeEvent(input$random_zone,{#
        zones$val <- runif(input$n.area)#
        pal <- colorNumeric(viridis::plasma(7),#
                            domain=c(-0.1,1.1))#
        leafletProxy("map_plot", data=zones$sect) %>%#
            clearShapes() %>%#
            addPolygons(color = '#FFFFFF',#
                        weight = 2,#
                        opacity = 1,#
                        fillColor = ~pal(zones$val),#
                        fillOpacity = 1,#
                        highlightOptions = highlightOptions(color = ~pal(zones$val), #
                                                            weight = 8,#
                                                            opacity = 1,#
                                                            bringToFront = TRUE))#
    })#
    observeEvent(input$enter_val,{#
        zones$val[unlist(zones$ov)] <- as.numeric(input$hab_val)#
        pal <- colorNumeric(viridis::plasma(7),#
                            domain=c(-0.1,1.1))#
        leafletProxy("map_plot", data=zones$sect) %>%#
            clearShapes() %>%#
            addPolygons(color = '#FFFFFF',#
                        weight = 2,#
                        opacity = 1,#
                        fillColor = ~pal(zones$val),#
                        fillOpacity = 1,#
                        highlightOptions = highlightOptions(color = ~pal(zones$val), #
                                                            weight = 8,#
                                                            opacity = 1,#
                                                            bringToFront = TRUE))#
    })#
#
    output$misc <- renderTable({#
        if(is.null(zones$val)) return()#
        matrix(zones$val, nrow=1, ncol=input$n.area,#
               dimnames=list("Zone",1:input$n.area))#
    },rownames=TRUE)#
    output$amat_slider <- renderUI({#
        sliderInput('amat', label=NULL,#
                    min=1, max=input$a_max-1, step=1, value=2)#
    })#
    output$m_slider <- renderUI({#
        sliderInput('killM', label=NULL,#
                    min=0.05, max=0.95, step=0.05, value=1.5*input$vbk)#
    })#
    cap.input <- reactive({#
        c(input$cap, input$cap_sl)#
    })#
    vul.input <- reactive({#
        c(input$slot, input$slot_sl)#
    })#
    proj.len <- reactive({#
        seq(0,ceiling(input$vbLinf),by=1)#
    })#
    output$cap_slider <- renderUI({#
        noUiSliderInput(#
            inputId = "cap", label = NULL,#
            min = 0, max = round(input$vbLinf,-2)*2, #
            value = c(round(round(input$vbLinf,-2)*0.05), round(round(input$vbLinf,-2)*2)),#
            step = 10)#
    })#
    output$slot_slider <- renderUI({#
        noUiSliderInput(#
            inputId = "slot", label = NULL,#
            min = 0, max = round(input$vbLinf*2,-2), #
            value = c(round(round(input$vbLinf,-2)*0.2), round(input$vbLinf*2,-2)),#
            step = 10)#
    })#
    output$sim_minll_slider <- renderUI({#
        noUiSliderInput(#
            inputId = "minll", label = NULL,#
            min = 0, max = round(input$vbLinf,-2), #
            value = c(0, round(input$vbLinf,-2)),#
            step = 10)#
    })#
    output$sim_maxll_slider <- renderUI({#
        noUiSliderInput(#
            inputId = "maxll", label = NULL,#
            min = round(input$vbLinf*0.5,-2), max = round(input$vbLinf*2,-2), #
            value = c(round(input$vbLinf*0.5,-2), round(input$vbLinf*2,-2)),#
            step = 10)#
    })#
    life.vec <- reactive({#
        req(input$killM)#
        life.vec <- list()#
        life.vec$Age = seq(1,input$a_max)  #creates vector of ages to Amax#
        life.vec$TL = input$vbLinf*(1-exp(-input$vbk*(life.vec$Age-input$vbtknot))) #estimate length at age#
        life.vec$Wt = ((input$lwa*1e-6)*(life.vec$TL*10)^input$lwb)/1000  #estimate weight at age#
        life.vec$Fec = pmax(0,life.vec$Wt-life.vec$Wt[input$amat]) #fecundity (grabs the Wt at the age at maturity)#
        life.vec$vulcap <- vul.len(life.vec$TL, cap.input())#
        life.vec$vulharv <- vul.len(life.vec$TL, vul.input())#
        #lorenzen#
        life.vec$So <- (1+(input$vbLinf/life.vec$TL) * (exp(input$vbk)-1))^(-input$killM/input$vbk)#
        life.vec$S <- rep(0,input$a_max)#
        life.vec$Sf <- rep(0,input$a_max)#
        life.vec$S[1] <- life.vec$Sf[1] <- 1#
        for(i in 2:input$a_max){#
            life.vec$S[i] <- life.vec$S[i-1] * life.vec$So[i-1]#
            life.vec$Sf[i] <- life.vec$Sf[i-1] * life.vec$So[i-1] *#
                (1-(life.vec$vulcap[i]*input$killU - life.vec$vulharv[i]*input$killU)*input$killD) *#
                (1-life.vec$vulharv[i]*input$killU)#
        }#
        life.vec$epro <- sum(life.vec$S * life.vec$Fec)#
        life.vec$eprf <- sum(life.vec$Sf * life.vec$Fec)#
        life.vec$bpro <- sum(life.vec$S * life.vec$Wt)#
        life.vec$npro <- life.vec$S#
        life.vec$vbpro <- sum((life.vec$vulcap - life.vec$vulharv)*#
                                  life.vec$Wt * life.vec$S)#
        life.vec$vbpro <- sum(life.vec$vulharv * life.vec$Wt * life.vec$S)#
        life.vec$vbprf <- sum(life.vec$vulharv * life.vec$Wt * life.vec$Sf)#
        life.vec$spr <- life.vec$epro/life.vec$eprf#
        life.vec$bo <- input$Ro * life.vec$bpro#
        life.vec$no <- input$Ro * life.vec$npro#
        life.vec$vbo <- input$Ro * life.vec$vbpro#
        life.vec$eo <- input$Ro*life.vec$epro#
        life.vec$bha <- input$CR/life.vec$epro#
        life.vec$bhb <- (input$CR-1)/life.vec$eo#
        life.vec$r.eq <- pmax(0,(life.vec$bha*life.vec$eprf-1)/(life.vec$bhb*life.vec$eprf))#
        life.vec$yield.eq <- input$killU * life.vec$vbprf * life.vec$r.eq#
        life.vec$bha.adj <- life.vec$bha * zones$val^input$cstar#
        life.vec$bhb.adj <- life.vec$bhb * zones$val^input$cstar/zones$val#
        life.vec$Ro.vec <- pmax(0,(life.vec$bha.adj*life.vec$epro-1)/(life.vec$bhb.adj * life.vec$epro))#
        return(life.vec)#
    })#
    sim <- reactive({#
        str <- rep(list(matrix(0, nrow=input$n_years, ncol=input$n.area)),7)#
        names(str) <- c('eggs','N','B','VB','yield','obs_err','larv')#
        str$Nage <- array(0, c(input$n_years, input$a_max, input$n.area))#
        str$Nage[1,,] <-  life.vec()$S %o% life.vec()$Ro.vec#
        str$eggs[1,] <- colSums(life.vec()$Fec * str$Nage[1,,])#
            str$larv[1,] <- str$eggs[1,] * abs(input$disp_flag-1) +#
                input$disp_flag * sapply(1:input$n.area,#
                 function(x) sum(str$eggs[1,] *#
                             dnorm(1:input$n.area,#
                                   x,#
                                   input$sigma_disp)))#
        for(i in 2:input$n_years){#
            str$larv[i,] <- str$eggs[i-1,] * abs(input$disp_flag-1) +#
                input$disp_flag * sapply(1:input$n.area,#
                function(x) sum(str$eggs[i-1,] *#
                             dnorm(1:input$n.area,#
                                   x, input$sigma_disp)))#
            for(k in 1:input$n.area){#
                str$Nage[i,1,k] <- life.vec()$bha.adj[k] * str$larv[i-1,k] /#
                    (1 + life.vec()$bhb.adj[k]*str$larv[i-1,k])#
                for(j in 2:input$a_max){#
                    str$Nage[i,j,k] <- str$Nage[i-1,j-1,k] * life.vec()$So[j-1] *#
                        (1-(life.vec()$vulcap[j-1]*input$killU -#
                                life.vec()$vulharv[j-1]*input$killU)*input$killD) *#
                        (1-life.vec()$vulharv[j-1]*input$killU)#
                }#
                str$eggs[i,k] <- sum(life.vec()$Fec * str$Nage[i,,k])#
            }#
        }#
        str$N <- rowSums(aperm(str$Nage,c(1,3,2)), dim=2)#
        str$B <- apply(str$Nage,c(1,3), function(x) x*life.vec()$Wt)#
        str$VB <- apply(str$Nage,c(1,3), function(x) x*life.vec()$Wt*life.vec()$vulharv)#
        str$yield <- input$killU * str$VB#
        return(str)#
    })#
    output$vul_plot <- renderPlot({#
        lens <- proj.len()#
        vul.out <- vul.len(lens, vul.input())#
        cap.out <- vul.len(lens, cap.input())#
        par(mar=c(4,4,1,1))#
        plot(lens, vul.out,#
             type='n',ylim=c(0,1),#
             xlab='TL (cm)', ylab='Vulnerability', las=1, #
             cex.axis=1.4, cex.lab=1.4)#
        polygon(x = c(lens,rev(lens)),#
                y = c(rep(0,length(lens)), rev(cap.out)),#
                border=FALSE, col=col2rgbA('dodgerblue3',0.2))#
        polygon(x = c(lens, rev(lens)),#
                y = c(rep(0,length(lens)), rev(vul.out)),#
                border=FALSE, col=col2rgbA('darkcyan', 0.2))#
        # polygon(x = c(lens, rev(lens)),#
        #         y = c(rep(1,length(lens)), rev(vul.out)),#
        #         border=FALSE, col=col2rgbA('darkorchid4', 0.2))#
        lines(lens, vul.out, lwd=4, col='darkcyan')#
        lines(lens, cap.out, lwd=4, col='dodgerblue3')#
    })#
    output$life_plot <- renderPlot({#
        if(is.null(life.vec()$Age)) return()#
        par(mar=c(5,5,1,1), mfrow=c(3,1), oma=c(0,1,0,0),#
            las=1, cex.lab=1.6, cex.axis=1.6)#
        plot(life.vec()$Age, life.vec()$TL, type='l', #
             col='darkorchid4', lwd=3, ylab="",#
             xlab = "Age")#
        mtext("TL (cm)", side=2, line=3.5, las=0, xpd=NA)#
        plot(life.vec()$Age, life.vec()$Wt, type='l',#
             col='black', lwd=3, ylab="",#
             xlab = "Age")#
        lines(life.vec()$Age, life.vec()$Fec, #
              col = 'firebrick2', lwd=3)#
        legend("topleft", legend=c('Fecundity','Wt'),#
               col=c('firebrick2','black'), lwd=3, bty='n', cex=1.6)#
        mtext("Wt (kg)/Fecundity", side=2, line=3.5, las=0, xpd=NA)#
        plot(life.vec()$Age, life.vec()$S, type='l', #
             col='darkorchid4', lwd=3, ylab="",#
             xlab = "Age")#
        lines(life.vec()$Age, life.vec()$Sf,#
              col='darkorange', lwd=3)#
        legend("topright", legend=c('S',expression(S[f])),#
               col=c('darkorchid4','darkorange'), lwd=3, bty='n', cex=1.6)#
        mtext("Survival", side=2, line=3.5, las=0, xpd=NA)#
    })#
    output$Ro_vec <- renderText({#
        paste0("Ro.vec:", round(life.vec()$Ro.vec))#
    })#
    output$N_plot <- renderPlot({#
        v <- sim()#
        layout(matrix(1:2,1,2),width=c(1,0.2))#
        par(mar=c(4,4,1,1))#
        plot(1:input$n_years,#
             v$N[,1], type='n', #
             xlab='Years', ylab='Numbers',#
             ylim=range(v$N), las=1)#
        for(i in 1:input$n.area){#
            lines(1:input$n_years, v$N[,i], #
                  col=viridis::viridis(input$n.area+1)[i],#
                  lwd=4)#
        }#
        par(mar=c(0,0,0,0))#
        plot.new()#
        plot.window(xlim=c(0,1), ylim=c(0,1))#
        legend("left", legend = paste0("Z",1:input$n.area),#
               col = viridis::viridis(input$n.area+1), lwd=4, bty='n', xpd=NA)#
        # image(y = 1:input$a_max,#
        #                x = 1:input$n.area,#
        #                z = t(v$Nage[input$n_years,,]),#
        #       col = viridis::viridis(100),#
        #       xlab="Zones", ylab="Ages", las=1)#
    })#
    output$vis_sim <- renderText({#
        # v <- sim()#
        # v$Nage[1,,]#
        life.vec()$bha.adj#
    })#
}#
#
# Run the application #
shinyApp(ui = ui, server = server)
rm(list=ls())
library(shiny)#
library(bslib)#
library(leaflet)#
library(leaflet.extras)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
#
def_bbox <- st_bbox(tracks)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#https://shiny.posit.co/r/articles/build/tag-glossary/#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&family=Rubik+Moonrocks&display=swap');#
      h1 {#
        font-family: 'Rubik Moonrocks', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = tags$em("Choose an Panther"), #make italic for BB#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    ),#
   leafletOutput("map_plot",height=500)#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
    output$map_plot <- renderLeaflet(#
        leaflet() %>%#
            addProviderTiles("Esri.WorldTerrain")%>%#
                fitBounds(lng1 = def_bbox[1],#
                          lng2 = def_bbox[2],#
                          lat1 = def_bbox[3],#
                          lat2 = def_bbox[4])#
    )#
}#
#
shinyApp(ui = ui, server = server)
library(shiny)#
library(bslib)#
library(leaflet)#
library(leaflet.extras)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
#
def_bbox <- st_bbox(tracks)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#https://shiny.posit.co/r/articles/build/tag-glossary/#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&family=Rubik+Moonrocks&display=swap');#
      h1 {#
        font-family: 'Rubik Moonrocks', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = tags$em("Choose an Panther"), #make italic for BB#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    ),#
   leafletOutput("map_plot",height=500)#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
    output$map_plot <- renderLeaflet(#
        leaflet() %>%#
            addProviderTiles("OpenTopoMap")%>%#
                fitBounds(lng1 = def_bbox[1],#
                          lng2 = def_bbox[2],#
                          lat1 = def_bbox[3],#
                          lat2 = def_bbox[4])#
    )#
}#
#
shinyApp(ui = ui, server = server)
leaflet() %>%#
            addProviderTiles("Stadia.StamenWatercolor")
library(shiny)#
library(bslib)#
library(leaflet)#
library(leaflet.extras)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
#
def_bbox <- st_bbox(tracks)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#https://shiny.posit.co/r/articles/build/tag-glossary/#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&family=Rubik+Moonrocks&display=swap');#
      h1 {#
        font-family: 'Rubik Moonrocks', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = tags$em("Choose an Panther"), #make italic for BB#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    ),#
   leafletOutput("map_plot",height=500)#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
    output$map_plot <- renderLeaflet(#
        leaflet() %>%#
            addProviderTiles("Esri.WorldPhysical")%>%#
                fitBounds(lng1 = def_bbox[1],#
                          lng2 = def_bbox[2],#
                          lat1 = def_bbox[3],#
                          lat2 = def_bbox[4])#
    )#
}#
#
shinyApp(ui = ui, server = server)
leaflet() %>%#
            addProviderTiles("Esri.WorldPhysical")
def_bbox
library(shiny)#
library(bslib)#
library(leaflet)#
library(leaflet.extras)#
library(shinyWidgets)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
library(sf)#
path <- '/Users/zach/Dropbox/Teaching/2025 - FAS 6932 - RShiny/BuildingRShinyCourse/Day 4 - Advanced UI/leaflet_ex/'#
setwd(path)#
tracks <- st_read("./tracks/panthers.shp")#
tracks <- st_transform(tracks,'EPSG:4326')#
tracks$ID <- factor(tracks$CatID,#
                    levels = unique(tracks$CatID),#
                    labels = LETTERS[1:length(unique(tracks$CatID))])#
#
fancy_names <- lapply(as.list(levels(tracks$ID)),#
                      function(x)HTML(paste0("<customLabel>",x,"</customLabel>")))#
customLabel <- tag("customLabel", list(class = "customLabel"))#
#
def_bbox <- st_bbox(tracks)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#https://shiny.posit.co/r/articles/build/tag-glossary/#
ui <- page_sidebar(#
   shiny::tag("customLabel", varArgs = list("font-family" = "'Barrio', san-serif")),#
   tags$style(HTML("#
      @import url('https://fonts.googleapis.com/css2?family=Barrio&family=Rubik+Moonrocks&display=swap');#
      h1 {#
        font-family: 'Rubik Moonrocks', san-serif;#
      }#
      customLabel {#
        font-family: 'Barrio', san-serif;#
      }"#
      )#
    ),                #
   title = h1('Florida Panther Tracks'),#
   sidebar = sidebar(#
     prettyCheckboxGroup(#
        inputId = "panther_choice",#
        label = tags$em("Choose an Panther"), #make italic for BB#
        choiceNames = fancy_names,#
        choiceValues = levels(tracks$ID),#
        selected = as.character(levels(tracks$ID)),#
        shape = 'curve',#
        inline=FALSE,#
        outline = TRUE,#
        animation = 'jelly',#
        icon = icon("ok-sign",lib = "glyphicon"))#
    ),#
   leafletOutput("map_plot",height=500)#
)#
###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
server <- function(input, output, session){#
    output$map_plot <- renderLeaflet(#
        leaflet() %>%#
            addProviderTiles("Esri.WorldPhysical")%>%#
                fitBounds(lng1 = def_bbox[1],#
                          lng2 = def_bbox[3],#
                          lat1 = def_bbox[2],#
                          lat2 = def_bbox[4])#
    )#
}#
#
shinyApp(ui = ui, server = server)
def_bbox
leaflet() %>%#
            addProviderTiles("Esri.WorldPhysical")%>%#
                fitBounds(lng1 = def_bbox[1],#
                          lng2 = def_bbox[3],#
                          lat1 = def_bbox[2],#
                          lat2 = def_bbox[4])
leaflet() %>%#
            addProviderTiles("Esri.WorldPhysical")
?fitBounds
def_cent <- st_centroid(st_union(tracks))
def_cent
def_cent <- st_coordinates(st_centroid(st_union(tracks)))
def_cent
leaflet() %>%#
            addProviderTiles("Esri.WorldPhysical")%>%#
                setView(lng = def_cent[1,1],#
                        lat = def_cent[1,2],#
                        zoom = 18)
install.packages('leaflet',force=TRUE)
install.packages('leaflet.extras',force=TRUE)
